# NOTE: The order here matters slightly! 
# Be careful when editing.

# Number of price processes to simulate.
price_paths = 10
# Number of workers to use for parallelization.
worker_limit = 32
# File output parameters struct.
output_path = "output"
output_file_names = "uniswap"

# Volatility sweeping parameters.
volatility_low = 0.01
volatility_high = 0.1
number_of_volatility_steps = 10

# Struct for all price processes init parameters.
# A price process is a stochastic process that describes the evolution of a price_process.
# # Fields
# * `timestep` - Time step of the simulation. (f64)
# * `timescale` - Time in string interpretation. (String)
# * `num_steps` - Number of steps in the simulation. (usize)
# * `initial_price` - Initial price of the simulation. (f64)
# * `seed` - Seed for testing. (u64)
# * `process_type` - Type of price process. (PriceProcessType)
timestep = 0.0027397
timescale = "trades"
num_steps = 1000
initial_price = 1
seed = 887

[process_type]
price_process_type = "GBM"

# Ornstein-Uhlenbeck process parameters struct.
# # Fields
# * `volatility` - Volatility of the underlying asset. (f64)
# * `mean_reversion_speed` - Mean reversion speed of the underlying asset. (f64)
# * `mean_price` - Mean price of the underlying asset. (f64)
# [process_type.price_process]
# volatility = 0.01
# mean_reversion_speed = 50.0
# mean_price = 1.0

# Geometric Brownian Motion process parameters struct.
# # Fields
# * `drift` - Price drift of the underlying asset. (f64)
# * `volatility` - Volatility of the underlying asset. (f64)
# e.g., 
[process_type.price_process]
drift = 0.1
volatility = 0.07