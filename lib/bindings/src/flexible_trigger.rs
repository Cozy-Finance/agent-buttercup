pub use flexible_trigger::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod flexible_trigger {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract IManager\",\"name\":\"_manager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_boss\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"_freezers\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isAutoTrigger\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_maxFreezeDuration\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidStateTransition\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"SetLimitReached\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Unacknowledged\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Unauthorized\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FreezerAdded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract ISet\",\"name\":\"set\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SetAdded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"enum MarketState\",\"name\":\"state\",\"type\":\"uint8\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TriggerStateUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_SET_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acknowledge\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"acknowledged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract ISet\",\"name\":\"_set\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"boss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"freeze\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"freezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"freezers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getSets\",\"outputs\":[{\"internalType\":\"contract ISet[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getSetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isAutoTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxFreezeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"publicTrigger\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"resume\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"runProgrammaticCheck\",\"outputs\":[{\"internalType\":\"enum MarketState\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sets\",\"outputs\":[{\"internalType\":\"contract ISet\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum MarketState\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"trigger\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static FLEXIBLETRIGGER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        224,
        96,
        64,
        82,
        52,
        128,
        21,
        98,
        0,
        0,
        94,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        18,
        99,
        56,
        3,
        128,
        98,
        0,
        18,
        99,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        129,
        145,
        98,
        0,
        3,
        100,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        129,
        22,
        96,
        128,
        82,
        132,
        22,
        96,
        192,
        82,
        96,
        160,
        129,
        144,
        82,
        96,
        3,
        128,
        84,
        96,
        255,
        25,
        144,
        129,
        22,
        132,
        21,
        21,
        23,
        144,
        145,
        85,
        96,
        0,
        128,
        84,
        144,
        145,
        22,
        129,
        85,
        131,
        81,
        144,
        91,
        129,
        129,
        16,
        21,
        98,
        0,
        1,
        134,
        87,
        96,
        1,
        96,
        4,
        96,
        0,
        135,
        132,
        129,
        81,
        129,
        16,
        98,
        0,
        0,
        219,
        87,
        98,
        0,
        0,
        219,
        98,
        0,
        4,
        55,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        96,
        0,
        97,
        1,
        0,
        10,
        129,
        84,
        129,
        96,
        255,
        2,
        25,
        22,
        144,
        131,
        21,
        21,
        2,
        23,
        144,
        85,
        80,
        127,
        1,
        28,
        102,
        155,
        238,
        66,
        186,
        9,
        42,
        23,
        15,
        57,
        237,
        219,
        70,
        183,
        167,
        209,
        145,
        87,
        156,
        144,
        202,
        124,
        42,
        140,
        132,
        24,
        192,
        206,
        133,
        179,
        133,
        130,
        129,
        81,
        129,
        16,
        98,
        0,
        1,
        80,
        87,
        98,
        0,
        1,
        80,
        98,
        0,
        4,
        55,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        64,
        81,
        98,
        0,
        1,
        117,
        145,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        1,
        1,
        98,
        0,
        0,
        183,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        98,
        0,
        4,
        77,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        66,
        73,
        32,
        100,
        101,
        99,
        111,
        100,
        105,
        110,
        103,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        116,
        117,
        112,
        108,
        101,
        32,
        111,
        102,
        102,
        115,
        96,
        68,
        130,
        1,
        82,
        97,
        25,
        93,
        96,
        242,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        1,
        251,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        43,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        98,
        0,
        18,
        67,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        106,
        114,
        114,
        97,
        121,
        32,
        115,
        116,
        114,
        105,
        100,
        101,
        96,
        168,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        98,
        0,
        2,
        179,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        43,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        98,
        0,
        18,
        67,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        106,
        28,
        156,
        152,
        94,
        72,
        27,
        217,
        153,
        156,
        217,
        93,
        96,
        170,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        129,
        81,
        96,
        32,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        131,
        17,
        21,
        98,
        0,
        2,
        210,
        87,
        98,
        0,
        2,
        210,
        98,
        0,
        2,
        0,
        86,
        91,
        130,
        96,
        5,
        27,
        96,
        64,
        81,
        96,
        31,
        25,
        96,
        63,
        131,
        1,
        22,
        129,
        1,
        129,
        129,
        16,
        132,
        130,
        17,
        23,
        21,
        98,
        0,
        2,
        250,
        87,
        98,
        0,
        2,
        250,
        98,
        0,
        2,
        0,
        86,
        91,
        96,
        64,
        82,
        147,
        132,
        82,
        133,
        129,
        1,
        131,
        1,
        147,
        131,
        129,
        1,
        146,
        80,
        135,
        133,
        17,
        21,
        98,
        0,
        3,
        30,
        87,
        98,
        0,
        3,
        30,
        98,
        0,
        2,
        22,
        86,
        91,
        131,
        135,
        1,
        145,
        80,
        91,
        132,
        130,
        16,
        21,
        98,
        0,
        3,
        72,
        87,
        98,
        0,
        3,
        56,
        130,
        98,
        0,
        1,
        227,
        86,
        91,
        131,
        82,
        145,
        131,
        1,
        145,
        144,
        131,
        1,
        144,
        98,
        0,
        3,
        36,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        81,
        128,
        21,
        21,
        129,
        20,
        98,
        0,
        1,
        251,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        98,
        0,
        3,
        200,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        66,
        73,
        32,
        100,
        101,
        99,
        111,
        100,
        105,
        110,
        103,
        58,
        32,
        116,
        117,
        112,
        108,
        101,
        32,
        100,
        97,
        116,
        97,
        32,
        116,
        111,
        111,
        32,
        115,
        104,
        111,
        96,
        68,
        130,
        1,
        82,
        97,
        28,
        157,
        96,
        242,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        98,
        0,
        3,
        211,
        134,
        98,
        0,
        1,
        227,
        86,
        91,
        148,
        80,
        98,
        0,
        3,
        227,
        96,
        32,
        135,
        1,
        98,
        0,
        1,
        227,
        86,
        91,
        96,
        64,
        135,
        1,
        81,
        144,
        148,
        80,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        21,
        98,
        0,
        4,
        5,
        87,
        98,
        0,
        4,
        5,
        98,
        0,
        1,
        147,
        86,
        91,
        98,
        0,
        4,
        19,
        136,
        130,
        137,
        1,
        98,
        0,
        2,
        94,
        86,
        91,
        147,
        80,
        80,
        98,
        0,
        4,
        36,
        96,
        96,
        135,
        1,
        98,
        0,
        3,
        83,
        86,
        91,
        145,
        80,
        96,
        128,
        134,
        1,
        81,
        144,
        80,
        146,
        149,
        80,
        146,
        149,
        144,
        147,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        97,
        13,
        156,
        98,
        0,
        4,
        167,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        3,
        25,
        1,
        82,
        129,
        129,
        97,
        3,
        106,
        1,
        82,
        129,
        129,
        97,
        4,
        144,
        1,
        82,
        129,
        129,
        97,
        5,
        133,
        1,
        82,
        97,
        6,
        23,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        242,
        1,
        82,
        97,
        4,
        225,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        80,
        1,
        82,
        97,
        6,
        200,
        1,
        82,
        97,
        13,
        156,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        93,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        1,
        110,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        91,
        34,
        127,
        155,
        17,
        97,
        0,
        250,
        87,
        128,
        99,
        194,
        183,
        88,
        225,
        17,
        97,
        0,
        190,
        87,
        128,
        99,
        194,
        183,
        88,
        225,
        20,
        97,
        2,
        237,
        87,
        128,
        99,
        199,
        114,
        175,
        57,
        20,
        97,
        3,
        20,
        87,
        128,
        99,
        213,
        128,
        222,
        212,
        20,
        97,
        3,
        59,
        87,
        128,
        99,
        232,
        99,
        118,
        197,
        20,
        97,
        3,
        78,
        87,
        128,
        99,
        253,
        126,
        27,
        238,
        20,
        97,
        3,
        86,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        91,
        34,
        127,
        155,
        20,
        97,
        2,
        176,
        87,
        128,
        99,
        98,
        165,
        175,
        59,
        20,
        97,
        2,
        195,
        87,
        128,
        99,
        127,
        236,
        141,
        56,
        20,
        97,
        2,
        203,
        87,
        128,
        99,
        162,
        206,
        61,
        73,
        20,
        97,
        2,
        211,
        87,
        128,
        99,
        193,
        157,
        147,
        251,
        20,
        97,
        2,
        224,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        55,
        160,
        175,
        193,
        17,
        97,
        1,
        65,
        87,
        128,
        99,
        55,
        160,
        175,
        193,
        20,
        97,
        2,
        54,
        87,
        128,
        99,
        72,
        28,
        106,
        117,
        20,
        97,
        2,
        75,
        87,
        128,
        99,
        73,
        35,
        61,
        93,
        20,
        97,
        2,
        138,
        87,
        128,
        99,
        79,
        156,
        168,
        197,
        20,
        97,
        2,
        146,
        87,
        128,
        99,
        89,
        83,
        113,
        68,
        20,
        97,
        2,
        154,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        4,
        111,
        125,
        162,
        20,
        97,
        1,
        211,
        87,
        128,
        99,
        8,
        108,
        41,
        141,
        20,
        97,
        1,
        221,
        87,
        128,
        99,
        31,
        129,
        99,
        82,
        20,
        97,
        1,
        254,
        87,
        128,
        99,
        44,
        247,
        197,
        49,
        20,
        97,
        2,
        33,
        87,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        53,
        96,
        36,
        130,
        1,
        82,
        127,
        67,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        104,
        97,
        118,
        101,
        32,
        102,
        97,
        108,
        108,
        98,
        97,
        99,
        107,
        32,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        116,
        110,
        111,
        114,
        32,
        114,
        101,
        99,
        101,
        105,
        118,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        110,
        115,
        96,
        88,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        97,
        1,
        219,
        97,
        3,
        95,
        86,
        91,
        0,
        91,
        96,
        3,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        233,
        97,
        2,
        12,
        54,
        96,
        4,
        97,
        12,
        60,
        86,
        91,
        96,
        4,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        41,
        97,
        3,
        240,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        245,
        145,
        144,
        97,
        12,
        99,
        86,
        91,
        97,
        2,
        62,
        97,
        4,
        82,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        245,
        145,
        144,
        97,
        12,
        198,
        86,
        91,
        97,
        2,
        114,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        245,
        86,
        91,
        97,
        1,
        219,
        97,
        4,
        133,
        86,
        91,
        97,
        1,
        219,
        97,
        4,
        222,
        86,
        91,
        97,
        2,
        162,
        96,
        50,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        245,
        86,
        91,
        97,
        2,
        114,
        97,
        2,
        190,
        54,
        96,
        4,
        97,
        12,
        238,
        86,
        91,
        97,
        5,
        53,
        86,
        91,
        97,
        1,
        219,
        97,
        5,
        95,
        86,
        91,
        97,
        1,
        219,
        97,
        6,
        12,
        86,
        91,
        96,
        3,
        84,
        97,
        1,
        233,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        2,
        62,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        162,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        2,
        114,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        233,
        97,
        3,
        73,
        54,
        96,
        4,
        97,
        12,
        60,
        86,
        91,
        97,
        6,
        84,
        86,
        91,
        96,
        1,
        84,
        97,
        2,
        162,
        86,
        91,
        97,
        2,
        162,
        96,
        2,
        84,
        129,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        3,
        167,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        192,
        87,
        97,
        3,
        192,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        3,
        222,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        232,
        96,
        0,
        97,
        8,
        183,
        86,
        91,
        80,
        96,
        0,
        96,
        2,
        85,
        86,
        91,
        96,
        96,
        96,
        1,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        4,
        72,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        1,
        144,
        145,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        4,
        42,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        4,
        108,
        87,
        97,
        4,
        108,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        4,
        123,
        87,
        80,
        96,
        0,
        84,
        96,
        255,
        22,
        144,
        86,
        91,
        80,
        96,
        0,
        84,
        96,
        255,
        22,
        144,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        205,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        3,
        128,
        84,
        97,
        255,
        0,
        25,
        22,
        97,
        1,
        0,
        23,
        144,
        85,
        86,
        91,
        66,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        2,
        84,
        97,
        5,
        13,
        145,
        144,
        97,
        13,
        10,
        86,
        91,
        16,
        97,
        5,
        43,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        5,
        51,
        97,
        10,
        57,
        86,
        91,
        86,
        91,
        96,
        1,
        129,
        129,
        84,
        129,
        16,
        97,
        5,
        69,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        80,
        129,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        4,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        128,
        21,
        97,
        5,
        168,
        87,
        80,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        21,
        91,
        21,
        97,
        5,
        197,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        5,
        221,
        87,
        97,
        5,
        221,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        5,
        251,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        5,
        96,
        1,
        97,
        8,
        183,
        86,
        91,
        80,
        66,
        96,
        2,
        85,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        5,
        43,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        20,
        97,
        6,
        126,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        3,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        97,
        6,
        166,
        87,
        96,
        64,
        81,
        99,
        72,
        192,
        104,
        205,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        29,
        58,
        248,
        251,
        96,
        226,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        0,
        145,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        116,
        235,
        227,
        236,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        128,
        59,
        21,
        128,
        21,
        97,
        7,
        92,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        37,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        97,
        114,
        103,
        101,
        116,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        99,
        111,
        110,
        116,
        97,
        105,
        110,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        100,
        32,
        99,
        111,
        100,
        101,
        96,
        216,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        112,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        7,
        148,
        145,
        144,
        97,
        13,
        43,
        86,
        91,
        144,
        80,
        128,
        97,
        7,
        179,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        84,
        96,
        50,
        129,
        16,
        97,
        7,
        215,
        87,
        96,
        64,
        81,
        99,
        16,
        215,
        246,
        89,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        44,
        87,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        130,
        129,
        84,
        129,
        16,
        97,
        7,
        255,
        87,
        97,
        7,
        255,
        97,
        13,
        80,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        8,
        36,
        87,
        80,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        1,
        97,
        7,
        218,
        86,
        91,
        80,
        96,
        1,
        128,
        84,
        128,
        130,
        1,
        130,
        85,
        96,
        0,
        145,
        144,
        145,
        82,
        127,
        177,
        14,
        45,
        82,
        118,
        18,
        7,
        59,
        38,
        238,
        205,
        253,
        113,
        126,
        106,
        50,
        12,
        244,
        75,
        74,
        250,
        194,
        176,
        115,
        45,
        159,
        203,
        226,
        183,
        250,
        12,
        246,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        244,
        75,
        243,
        96,
        82,
        58,
        172,
        89,
        132,
        221,
        133,
        250,
        179,
        77,
        96,
        57,
        96,
        138,
        29,
        13,
        240,
        246,
        196,
        53,
        65,
        79,
        82,
        194,
        184,
        48,
        192,
        227,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        96,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        97,
        8,
        200,
        144,
        96,
        255,
        22,
        131,
        97,
        10,
        122,
        86,
        91,
        97,
        8,
        229,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        131,
        145,
        144,
        96,
        255,
        25,
        22,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        9,
        4,
        87,
        97,
        9,
        4,
        97,
        12,
        176,
        86,
        91,
        2,
        23,
        144,
        85,
        80,
        96,
        1,
        84,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        9,
        246,
        87,
        96,
        1,
        129,
        129,
        84,
        129,
        16,
        97,
        9,
        42,
        87,
        97,
        9,
        42,
        97,
        13,
        80,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        64,
        81,
        99,
        61,
        58,
        254,
        239,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        122,
        117,
        253,
        222,
        144,
        97,
        9,
        99,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        12,
        198,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        9,
        205,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        37,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        97,
        114,
        103,
        101,
        116,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        99,
        111,
        110,
        116,
        97,
        105,
        110,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        100,
        32,
        99,
        111,
        100,
        101,
        96,
        216,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        9,
        225,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        97,
        9,
        239,
        129,
        96,
        1,
        1,
        144,
        86,
        91,
        144,
        80,
        97,
        9,
        15,
        86,
        91,
        80,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        9,
        87,
        97,
        10,
        9,
        97,
        12,
        176,
        86,
        91,
        96,
        64,
        81,
        127,
        226,
        174,
        3,
        160,
        208,
        98,
        123,
        52,
        21,
        34,
        0,
        49,
        22,
        147,
        186,
        64,
        147,
        147,
        199,
        209,
        235,
        221,
        10,
        36,
        107,
        163,
        192,
        37,
        58,
        188,
        38,
        63,
        144,
        96,
        0,
        144,
        162,
        80,
        144,
        145,
        144,
        80,
        86,
        91,
        96,
        1,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        82,
        87,
        97,
        10,
        82,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        10,
        112,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        232,
        96,
        2,
        97,
        8,
        183,
        86,
        91,
        96,
        0,
        96,
        2,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        144,
        87,
        97,
        10,
        144,
        97,
        12,
        176,
        86,
        91,
        3,
        97,
        10,
        157,
        87,
        80,
        96,
        0,
        97,
        11,
        206,
        86,
        91,
        129,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        175,
        87,
        97,
        10,
        175,
        97,
        12,
        176,
        86,
        91,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        193,
        87,
        97,
        10,
        193,
        97,
        12,
        176,
        86,
        91,
        3,
        97,
        10,
        206,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        0,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        226,
        87,
        97,
        10,
        226,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        0,
        87,
        80,
        96,
        1,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        254,
        87,
        97,
        10,
        254,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        13,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        33,
        87,
        97,
        11,
        33,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        63,
        87,
        80,
        96,
        0,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        61,
        87,
        97,
        11,
        61,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        76,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        0,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        96,
        87,
        97,
        11,
        96,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        126,
        87,
        80,
        96,
        2,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        124,
        87,
        97,
        11,
        124,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        139,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        159,
        87,
        97,
        11,
        159,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        189,
        87,
        80,
        96,
        2,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        187,
        87,
        97,
        11,
        187,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        202,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        80,
        96,
        0,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        66,
        73,
        32,
        100,
        101,
        99,
        111,
        100,
        105,
        110,
        103,
        58,
        32,
        116,
        117,
        112,
        108,
        101,
        32,
        100,
        97,
        116,
        97,
        32,
        116,
        111,
        111,
        32,
        115,
        104,
        111,
        96,
        68,
        130,
        1,
        82,
        97,
        28,
        157,
        96,
        242,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        12,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        12,
        81,
        87,
        97,
        12,
        81,
        97,
        11,
        212,
        86,
        91,
        129,
        53,
        97,
        12,
        92,
        129,
        97,
        12,
        36,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        12,
        164,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        12,
        127,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        32,
        129,
        1,
        96,
        3,
        131,
        16,
        97,
        12,
        232,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        145,
        144,
        82,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        3,
        87,
        97,
        13,
        3,
        97,
        11,
        212,
        86,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        11,
        206,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        64,
        87,
        97,
        13,
        64,
        97,
        11,
        212,
        86,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        12,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        238,
        194,
        255,
        44,
        7,
        151,
        60,
        146,
        58,
        89,
        147,
        69,
        122,
        5,
        58,
        129,
        114,
        79,
        249,
        238,
        178,
        145,
        95,
        136,
        68,
        5,
        105,
        137,
        127,
        208,
        49,
        10,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        16,
        0,
        51,
        65,
        66,
        73,
        32,
        100,
        101,
        99,
        111,
        100,
        105,
        110,
        103,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        99,
        97,
        108,
        108,
        100,
        97,
        116,
        97,
        32,
        97,
    ];
    ///The bytecode of the contract.
    pub static FLEXIBLETRIGGER_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        93,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        1,
        110,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        91,
        34,
        127,
        155,
        17,
        97,
        0,
        250,
        87,
        128,
        99,
        194,
        183,
        88,
        225,
        17,
        97,
        0,
        190,
        87,
        128,
        99,
        194,
        183,
        88,
        225,
        20,
        97,
        2,
        237,
        87,
        128,
        99,
        199,
        114,
        175,
        57,
        20,
        97,
        3,
        20,
        87,
        128,
        99,
        213,
        128,
        222,
        212,
        20,
        97,
        3,
        59,
        87,
        128,
        99,
        232,
        99,
        118,
        197,
        20,
        97,
        3,
        78,
        87,
        128,
        99,
        253,
        126,
        27,
        238,
        20,
        97,
        3,
        86,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        91,
        34,
        127,
        155,
        20,
        97,
        2,
        176,
        87,
        128,
        99,
        98,
        165,
        175,
        59,
        20,
        97,
        2,
        195,
        87,
        128,
        99,
        127,
        236,
        141,
        56,
        20,
        97,
        2,
        203,
        87,
        128,
        99,
        162,
        206,
        61,
        73,
        20,
        97,
        2,
        211,
        87,
        128,
        99,
        193,
        157,
        147,
        251,
        20,
        97,
        2,
        224,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        55,
        160,
        175,
        193,
        17,
        97,
        1,
        65,
        87,
        128,
        99,
        55,
        160,
        175,
        193,
        20,
        97,
        2,
        54,
        87,
        128,
        99,
        72,
        28,
        106,
        117,
        20,
        97,
        2,
        75,
        87,
        128,
        99,
        73,
        35,
        61,
        93,
        20,
        97,
        2,
        138,
        87,
        128,
        99,
        79,
        156,
        168,
        197,
        20,
        97,
        2,
        146,
        87,
        128,
        99,
        89,
        83,
        113,
        68,
        20,
        97,
        2,
        154,
        87,
        97,
        1,
        110,
        86,
        91,
        128,
        99,
        4,
        111,
        125,
        162,
        20,
        97,
        1,
        211,
        87,
        128,
        99,
        8,
        108,
        41,
        141,
        20,
        97,
        1,
        221,
        87,
        128,
        99,
        31,
        129,
        99,
        82,
        20,
        97,
        1,
        254,
        87,
        128,
        99,
        44,
        247,
        197,
        49,
        20,
        97,
        2,
        33,
        87,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        53,
        96,
        36,
        130,
        1,
        82,
        127,
        67,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        104,
        97,
        118,
        101,
        32,
        102,
        97,
        108,
        108,
        98,
        97,
        99,
        107,
        32,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        116,
        110,
        111,
        114,
        32,
        114,
        101,
        99,
        101,
        105,
        118,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        110,
        115,
        96,
        88,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        97,
        1,
        219,
        97,
        3,
        95,
        86,
        91,
        0,
        91,
        96,
        3,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        233,
        97,
        2,
        12,
        54,
        96,
        4,
        97,
        12,
        60,
        86,
        91,
        96,
        4,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        41,
        97,
        3,
        240,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        245,
        145,
        144,
        97,
        12,
        99,
        86,
        91,
        97,
        2,
        62,
        97,
        4,
        82,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        245,
        145,
        144,
        97,
        12,
        198,
        86,
        91,
        97,
        2,
        114,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        245,
        86,
        91,
        97,
        1,
        219,
        97,
        4,
        133,
        86,
        91,
        97,
        1,
        219,
        97,
        4,
        222,
        86,
        91,
        97,
        2,
        162,
        96,
        50,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        245,
        86,
        91,
        97,
        2,
        114,
        97,
        2,
        190,
        54,
        96,
        4,
        97,
        12,
        238,
        86,
        91,
        97,
        5,
        53,
        86,
        91,
        97,
        1,
        219,
        97,
        5,
        95,
        86,
        91,
        97,
        1,
        219,
        97,
        6,
        12,
        86,
        91,
        96,
        3,
        84,
        97,
        1,
        233,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        2,
        62,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        162,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        2,
        114,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        233,
        97,
        3,
        73,
        54,
        96,
        4,
        97,
        12,
        60,
        86,
        91,
        97,
        6,
        84,
        86,
        91,
        96,
        1,
        84,
        97,
        2,
        162,
        86,
        91,
        97,
        2,
        162,
        96,
        2,
        84,
        129,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        3,
        167,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        192,
        87,
        97,
        3,
        192,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        3,
        222,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        232,
        96,
        0,
        97,
        8,
        183,
        86,
        91,
        80,
        96,
        0,
        96,
        2,
        85,
        86,
        91,
        96,
        96,
        96,
        1,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        4,
        72,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        1,
        144,
        145,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        4,
        42,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        4,
        108,
        87,
        97,
        4,
        108,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        4,
        123,
        87,
        80,
        96,
        0,
        84,
        96,
        255,
        22,
        144,
        86,
        91,
        80,
        96,
        0,
        84,
        96,
        255,
        22,
        144,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        4,
        205,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        3,
        128,
        84,
        97,
        255,
        0,
        25,
        22,
        97,
        1,
        0,
        23,
        144,
        85,
        86,
        91,
        66,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        2,
        84,
        97,
        5,
        13,
        145,
        144,
        97,
        13,
        10,
        86,
        91,
        16,
        97,
        5,
        43,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        5,
        51,
        97,
        10,
        57,
        86,
        91,
        86,
        91,
        96,
        1,
        129,
        129,
        84,
        129,
        16,
        97,
        5,
        69,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        80,
        129,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        4,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        128,
        21,
        97,
        5,
        168,
        87,
        80,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        21,
        91,
        21,
        97,
        5,
        197,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        5,
        221,
        87,
        97,
        5,
        221,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        5,
        251,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        5,
        96,
        1,
        97,
        8,
        183,
        86,
        91,
        80,
        66,
        96,
        2,
        85,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        5,
        43,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        20,
        97,
        6,
        126,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        3,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        97,
        6,
        166,
        87,
        96,
        64,
        81,
        99,
        72,
        192,
        104,
        205,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        29,
        58,
        248,
        251,
        96,
        226,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        0,
        145,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        22,
        144,
        99,
        116,
        235,
        227,
        236,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        128,
        59,
        21,
        128,
        21,
        97,
        7,
        92,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        37,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        97,
        114,
        103,
        101,
        116,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        99,
        111,
        110,
        116,
        97,
        105,
        110,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        100,
        32,
        99,
        111,
        100,
        101,
        96,
        216,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        112,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        7,
        148,
        145,
        144,
        97,
        13,
        43,
        86,
        91,
        144,
        80,
        128,
        97,
        7,
        179,
        87,
        96,
        64,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        84,
        96,
        50,
        129,
        16,
        97,
        7,
        215,
        87,
        96,
        64,
        81,
        99,
        16,
        215,
        246,
        89,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        44,
        87,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        130,
        129,
        84,
        129,
        16,
        97,
        7,
        255,
        87,
        97,
        7,
        255,
        97,
        13,
        80,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        8,
        36,
        87,
        80,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        1,
        97,
        7,
        218,
        86,
        91,
        80,
        96,
        1,
        128,
        84,
        128,
        130,
        1,
        130,
        85,
        96,
        0,
        145,
        144,
        145,
        82,
        127,
        177,
        14,
        45,
        82,
        118,
        18,
        7,
        59,
        38,
        238,
        205,
        253,
        113,
        126,
        106,
        50,
        12,
        244,
        75,
        74,
        250,
        194,
        176,
        115,
        45,
        159,
        203,
        226,
        183,
        250,
        12,
        246,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        244,
        75,
        243,
        96,
        82,
        58,
        172,
        89,
        132,
        221,
        133,
        250,
        179,
        77,
        96,
        57,
        96,
        138,
        29,
        13,
        240,
        246,
        196,
        53,
        65,
        79,
        82,
        194,
        184,
        48,
        192,
        227,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        96,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        97,
        8,
        200,
        144,
        96,
        255,
        22,
        131,
        97,
        10,
        122,
        86,
        91,
        97,
        8,
        229,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        131,
        145,
        144,
        96,
        255,
        25,
        22,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        9,
        4,
        87,
        97,
        9,
        4,
        97,
        12,
        176,
        86,
        91,
        2,
        23,
        144,
        85,
        80,
        96,
        1,
        84,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        9,
        246,
        87,
        96,
        1,
        129,
        129,
        84,
        129,
        16,
        97,
        9,
        42,
        87,
        97,
        9,
        42,
        97,
        13,
        80,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        64,
        81,
        99,
        61,
        58,
        254,
        239,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        122,
        117,
        253,
        222,
        144,
        97,
        9,
        99,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        12,
        198,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        9,
        205,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        37,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        97,
        114,
        103,
        101,
        116,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        99,
        111,
        110,
        116,
        97,
        105,
        110,
        96,
        68,
        130,
        1,
        144,
        129,
        82,
        100,
        32,
        99,
        111,
        100,
        101,
        96,
        216,
        27,
        96,
        100,
        131,
        1,
        82,
        96,
        132,
        130,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        9,
        225,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        97,
        9,
        239,
        129,
        96,
        1,
        1,
        144,
        86,
        91,
        144,
        80,
        97,
        9,
        15,
        86,
        91,
        80,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        9,
        87,
        97,
        10,
        9,
        97,
        12,
        176,
        86,
        91,
        96,
        64,
        81,
        127,
        226,
        174,
        3,
        160,
        208,
        98,
        123,
        52,
        21,
        34,
        0,
        49,
        22,
        147,
        186,
        64,
        147,
        147,
        199,
        209,
        235,
        221,
        10,
        36,
        107,
        163,
        192,
        37,
        58,
        188,
        38,
        63,
        144,
        96,
        0,
        144,
        162,
        80,
        144,
        145,
        144,
        80,
        86,
        91,
        96,
        1,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        82,
        87,
        97,
        10,
        82,
        97,
        12,
        176,
        86,
        91,
        20,
        97,
        10,
        112,
        87,
        96,
        64,
        81,
        99,
        35,
        230,
        158,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        232,
        96,
        2,
        97,
        8,
        183,
        86,
        91,
        96,
        0,
        96,
        2,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        144,
        87,
        97,
        10,
        144,
        97,
        12,
        176,
        86,
        91,
        3,
        97,
        10,
        157,
        87,
        80,
        96,
        0,
        97,
        11,
        206,
        86,
        91,
        129,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        175,
        87,
        97,
        10,
        175,
        97,
        12,
        176,
        86,
        91,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        193,
        87,
        97,
        10,
        193,
        97,
        12,
        176,
        86,
        91,
        3,
        97,
        10,
        206,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        0,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        226,
        87,
        97,
        10,
        226,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        0,
        87,
        80,
        96,
        1,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        10,
        254,
        87,
        97,
        10,
        254,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        13,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        33,
        87,
        97,
        11,
        33,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        63,
        87,
        80,
        96,
        0,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        61,
        87,
        97,
        11,
        61,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        76,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        0,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        96,
        87,
        97,
        11,
        96,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        126,
        87,
        80,
        96,
        2,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        124,
        87,
        97,
        11,
        124,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        139,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        96,
        1,
        131,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        159,
        87,
        97,
        11,
        159,
        97,
        12,
        176,
        86,
        91,
        20,
        128,
        21,
        97,
        11,
        189,
        87,
        80,
        96,
        2,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        11,
        187,
        87,
        97,
        11,
        187,
        97,
        12,
        176,
        86,
        91,
        20,
        91,
        21,
        97,
        11,
        202,
        87,
        80,
        96,
        1,
        97,
        11,
        206,
        86,
        91,
        80,
        96,
        0,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        66,
        73,
        32,
        100,
        101,
        99,
        111,
        100,
        105,
        110,
        103,
        58,
        32,
        116,
        117,
        112,
        108,
        101,
        32,
        100,
        97,
        116,
        97,
        32,
        116,
        111,
        111,
        32,
        115,
        104,
        111,
        96,
        68,
        130,
        1,
        82,
        97,
        28,
        157,
        96,
        242,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        129,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        12,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        12,
        81,
        87,
        97,
        12,
        81,
        97,
        11,
        212,
        86,
        91,
        129,
        53,
        97,
        12,
        92,
        129,
        97,
        12,
        36,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        12,
        164,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        12,
        127,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        32,
        129,
        1,
        96,
        3,
        131,
        16,
        97,
        12,
        232,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        145,
        144,
        82,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        3,
        87,
        97,
        13,
        3,
        97,
        11,
        212,
        86,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        11,
        206,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        64,
        87,
        97,
        13,
        64,
        97,
        11,
        212,
        86,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        12,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        238,
        194,
        255,
        44,
        7,
        151,
        60,
        146,
        58,
        89,
        147,
        69,
        122,
        5,
        58,
        129,
        114,
        79,
        249,
        238,
        178,
        145,
        95,
        136,
        68,
        5,
        105,
        137,
        127,
        208,
        49,
        10,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        16,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static FLEXIBLETRIGGER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct FlexibleTrigger<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for FlexibleTrigger<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for FlexibleTrigger<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for FlexibleTrigger<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for FlexibleTrigger<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(FlexibleTrigger))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> FlexibleTrigger<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                FLEXIBLETRIGGER_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                FLEXIBLETRIGGER_ABI.clone(),
                FLEXIBLETRIGGER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `MAX_SET_LENGTH` (0x59537144) function
        pub fn max_set_length(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([89, 83, 113, 68], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `acknowledge` (0x49233d5d) function
        pub fn acknowledge(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([73, 35, 61, 93], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `acknowledged` (0x086c298d) function
        pub fn acknowledged(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([8, 108, 41, 141], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `addSet` (0xd580ded4) function
        pub fn add_set(
            &self,
            set: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([213, 128, 222, 212], set)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `boss` (0xc772af39) function
        pub fn boss(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([199, 114, 175, 57], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `freeze` (0x62a5af3b) function
        pub fn freeze(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([98, 165, 175, 59], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `freezeTime` (0xfd7e1bee) function
        pub fn freeze_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([253, 126, 27, 238], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `freezers` (0x1f816352) function
        pub fn freezers(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([31, 129, 99, 82], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getSets` (0x2cf7c531) function
        pub fn get_sets(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([44, 247, 197, 49], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getSetsLength` (0xe86376c5) function
        pub fn get_sets_length(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([232, 99, 118, 197], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isAutoTrigger` (0xa2ce3d49) function
        pub fn is_auto_trigger(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([162, 206, 61, 73], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `manager` (0x481c6a75) function
        pub fn manager(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([72, 28, 106, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `maxFreezeDuration` (0xc2b758e1) function
        pub fn max_freeze_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([194, 183, 88, 225], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `publicTrigger` (0x4f9ca8c5) function
        pub fn public_trigger(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([79, 156, 168, 197], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `resume` (0x046f7da2) function
        pub fn resume(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([4, 111, 125, 162], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `runProgrammaticCheck` (0x37a0afc1) function
        pub fn run_programmatic_check(&self) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([55, 160, 175, 193], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sets` (0x5b227f9b) function
        pub fn sets(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([91, 34, 127, 155], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `state` (0xc19d93fb) function
        pub fn state(&self) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([193, 157, 147, 251], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `trigger` (0x7fec8d38) function
        pub fn trigger(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([127, 236, 141, 56], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `FreezerAdded` event
        pub fn freezer_added_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, FreezerAddedFilter>
        {
            self.0.event()
        }
        ///Gets the contract's `SetAdded` event
        pub fn set_added_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, SetAddedFilter> {
            self.0.event()
        }
        ///Gets the contract's `TriggerStateUpdated` event
        pub fn trigger_state_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, TriggerStateUpdatedFilter>
        {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, FlexibleTriggerEvents>
        {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for FlexibleTrigger<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidStateTransition` with signature `InvalidStateTransition()` and selector `0x8f9a780c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "InvalidStateTransition", abi = "InvalidStateTransition()")]
    pub struct InvalidStateTransition;
    ///Custom Error type `SetLimitReached` with signature `SetLimitReached()` and selector `0x86bfb2c8`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "SetLimitReached", abi = "SetLimitReached()")]
    pub struct SetLimitReached;
    ///Custom Error type `Unacknowledged` with signature `Unacknowledged()` and selector `0x48c068cd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "Unacknowledged", abi = "Unacknowledged()")]
    pub struct Unacknowledged;
    ///Custom Error type `Unauthorized` with signature `Unauthorized()` and selector `0x82b42900`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "Unauthorized", abi = "Unauthorized()")]
    pub struct Unauthorized;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FlexibleTriggerErrors {
        InvalidStateTransition(InvalidStateTransition),
        SetLimitReached(SetLimitReached),
        Unacknowledged(Unacknowledged),
        Unauthorized(Unauthorized),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for FlexibleTriggerErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) =
                <InvalidStateTransition as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::InvalidStateTransition(decoded));
            }
            if let Ok(decoded) = <SetLimitReached as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetLimitReached(decoded));
            }
            if let Ok(decoded) = <Unacknowledged as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Unacknowledged(decoded));
            }
            if let Ok(decoded) = <Unauthorized as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Unauthorized(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FlexibleTriggerErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::InvalidStateTransition(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetLimitReached(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Unacknowledged(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Unauthorized(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for FlexibleTriggerErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <InvalidStateTransition as ::ethers::contract::EthError>::selector() =>
                {
                    true
                }
                _ if selector == <SetLimitReached as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector == <Unacknowledged as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector == <Unauthorized as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for FlexibleTriggerErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::InvalidStateTransition(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetLimitReached(element) => ::core::fmt::Display::fmt(element, f),
                Self::Unacknowledged(element) => ::core::fmt::Display::fmt(element, f),
                Self::Unauthorized(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for FlexibleTriggerErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<InvalidStateTransition> for FlexibleTriggerErrors {
        fn from(value: InvalidStateTransition) -> Self {
            Self::InvalidStateTransition(value)
        }
    }
    impl ::core::convert::From<SetLimitReached> for FlexibleTriggerErrors {
        fn from(value: SetLimitReached) -> Self {
            Self::SetLimitReached(value)
        }
    }
    impl ::core::convert::From<Unacknowledged> for FlexibleTriggerErrors {
        fn from(value: Unacknowledged) -> Self {
            Self::Unacknowledged(value)
        }
    }
    impl ::core::convert::From<Unauthorized> for FlexibleTriggerErrors {
        fn from(value: Unauthorized) -> Self {
            Self::Unauthorized(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "FreezerAdded", abi = "FreezerAdded(address)")]
    pub struct FreezerAddedFilter {
        pub freezer: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "SetAdded", abi = "SetAdded(address)")]
    pub struct SetAddedFilter {
        pub set: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "TriggerStateUpdated", abi = "TriggerStateUpdated(uint8)")]
    pub struct TriggerStateUpdatedFilter {
        #[ethevent(indexed)]
        pub state: u8,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FlexibleTriggerEvents {
        FreezerAddedFilter(FreezerAddedFilter),
        SetAddedFilter(SetAddedFilter),
        TriggerStateUpdatedFilter(TriggerStateUpdatedFilter),
    }
    impl ::ethers::contract::EthLogDecode for FlexibleTriggerEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = FreezerAddedFilter::decode_log(log) {
                return Ok(FlexibleTriggerEvents::FreezerAddedFilter(decoded));
            }
            if let Ok(decoded) = SetAddedFilter::decode_log(log) {
                return Ok(FlexibleTriggerEvents::SetAddedFilter(decoded));
            }
            if let Ok(decoded) = TriggerStateUpdatedFilter::decode_log(log) {
                return Ok(FlexibleTriggerEvents::TriggerStateUpdatedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for FlexibleTriggerEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::FreezerAddedFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetAddedFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::TriggerStateUpdatedFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<FreezerAddedFilter> for FlexibleTriggerEvents {
        fn from(value: FreezerAddedFilter) -> Self {
            Self::FreezerAddedFilter(value)
        }
    }
    impl ::core::convert::From<SetAddedFilter> for FlexibleTriggerEvents {
        fn from(value: SetAddedFilter) -> Self {
            Self::SetAddedFilter(value)
        }
    }
    impl ::core::convert::From<TriggerStateUpdatedFilter> for FlexibleTriggerEvents {
        fn from(value: TriggerStateUpdatedFilter) -> Self {
            Self::TriggerStateUpdatedFilter(value)
        }
    }
    ///Container type for all input parameters for the `MAX_SET_LENGTH` function with signature `MAX_SET_LENGTH()` and selector `0x59537144`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "MAX_SET_LENGTH", abi = "MAX_SET_LENGTH()")]
    pub struct MaxSetLengthCall;
    ///Container type for all input parameters for the `acknowledge` function with signature `acknowledge()` and selector `0x49233d5d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "acknowledge", abi = "acknowledge()")]
    pub struct AcknowledgeCall;
    ///Container type for all input parameters for the `acknowledged` function with signature `acknowledged()` and selector `0x086c298d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "acknowledged", abi = "acknowledged()")]
    pub struct AcknowledgedCall;
    ///Container type for all input parameters for the `addSet` function with signature `addSet(address)` and selector `0xd580ded4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "addSet", abi = "addSet(address)")]
    pub struct AddSetCall {
        pub set: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `boss` function with signature `boss()` and selector `0xc772af39`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "boss", abi = "boss()")]
    pub struct BossCall;
    ///Container type for all input parameters for the `freeze` function with signature `freeze()` and selector `0x62a5af3b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "freeze", abi = "freeze()")]
    pub struct FreezeCall;
    ///Container type for all input parameters for the `freezeTime` function with signature `freezeTime()` and selector `0xfd7e1bee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "freezeTime", abi = "freezeTime()")]
    pub struct FreezeTimeCall;
    ///Container type for all input parameters for the `freezers` function with signature `freezers(address)` and selector `0x1f816352`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "freezers", abi = "freezers(address)")]
    pub struct FreezersCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `getSets` function with signature `getSets()` and selector `0x2cf7c531`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getSets", abi = "getSets()")]
    pub struct GetSetsCall;
    ///Container type for all input parameters for the `getSetsLength` function with signature `getSetsLength()` and selector `0xe86376c5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getSetsLength", abi = "getSetsLength()")]
    pub struct GetSetsLengthCall;
    ///Container type for all input parameters for the `isAutoTrigger` function with signature `isAutoTrigger()` and selector `0xa2ce3d49`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "isAutoTrigger", abi = "isAutoTrigger()")]
    pub struct IsAutoTriggerCall;
    ///Container type for all input parameters for the `manager` function with signature `manager()` and selector `0x481c6a75`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "manager", abi = "manager()")]
    pub struct ManagerCall;
    ///Container type for all input parameters for the `maxFreezeDuration` function with signature `maxFreezeDuration()` and selector `0xc2b758e1`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "maxFreezeDuration", abi = "maxFreezeDuration()")]
    pub struct MaxFreezeDurationCall;
    ///Container type for all input parameters for the `publicTrigger` function with signature `publicTrigger()` and selector `0x4f9ca8c5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "publicTrigger", abi = "publicTrigger()")]
    pub struct PublicTriggerCall;
    ///Container type for all input parameters for the `resume` function with signature `resume()` and selector `0x046f7da2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "resume", abi = "resume()")]
    pub struct ResumeCall;
    ///Container type for all input parameters for the `runProgrammaticCheck` function with signature `runProgrammaticCheck()` and selector `0x37a0afc1`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "runProgrammaticCheck", abi = "runProgrammaticCheck()")]
    pub struct RunProgrammaticCheckCall;
    ///Container type for all input parameters for the `sets` function with signature `sets(uint256)` and selector `0x5b227f9b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "sets", abi = "sets(uint256)")]
    pub struct SetsCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `state` function with signature `state()` and selector `0xc19d93fb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "state", abi = "state()")]
    pub struct StateCall;
    ///Container type for all input parameters for the `trigger` function with signature `trigger()` and selector `0x7fec8d38`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "trigger", abi = "trigger()")]
    pub struct TriggerCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FlexibleTriggerCalls {
        MaxSetLength(MaxSetLengthCall),
        Acknowledge(AcknowledgeCall),
        Acknowledged(AcknowledgedCall),
        AddSet(AddSetCall),
        Boss(BossCall),
        Freeze(FreezeCall),
        FreezeTime(FreezeTimeCall),
        Freezers(FreezersCall),
        GetSets(GetSetsCall),
        GetSetsLength(GetSetsLengthCall),
        IsAutoTrigger(IsAutoTriggerCall),
        Manager(ManagerCall),
        MaxFreezeDuration(MaxFreezeDurationCall),
        PublicTrigger(PublicTriggerCall),
        Resume(ResumeCall),
        RunProgrammaticCheck(RunProgrammaticCheckCall),
        Sets(SetsCall),
        State(StateCall),
        Trigger(TriggerCall),
    }
    impl ::ethers::core::abi::AbiDecode for FlexibleTriggerCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <MaxSetLengthCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::MaxSetLength(decoded));
            }
            if let Ok(decoded) = <AcknowledgeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Acknowledge(decoded));
            }
            if let Ok(decoded) = <AcknowledgedCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::Acknowledged(decoded));
            }
            if let Ok(decoded) = <AddSetCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::AddSet(decoded));
            }
            if let Ok(decoded) = <BossCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Boss(decoded));
            }
            if let Ok(decoded) = <FreezeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Freeze(decoded));
            }
            if let Ok(decoded) = <FreezeTimeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FreezeTime(decoded));
            }
            if let Ok(decoded) = <FreezersCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Freezers(decoded));
            }
            if let Ok(decoded) = <GetSetsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetSets(decoded));
            }
            if let Ok(decoded) = <GetSetsLengthCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetSetsLength(decoded));
            }
            if let Ok(decoded) = <IsAutoTriggerCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::IsAutoTrigger(decoded));
            }
            if let Ok(decoded) = <ManagerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Manager(decoded));
            }
            if let Ok(decoded) =
                <MaxFreezeDurationCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::MaxFreezeDuration(decoded));
            }
            if let Ok(decoded) = <PublicTriggerCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::PublicTrigger(decoded));
            }
            if let Ok(decoded) = <ResumeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Resume(decoded));
            }
            if let Ok(decoded) =
                <RunProgrammaticCheckCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::RunProgrammaticCheck(decoded));
            }
            if let Ok(decoded) = <SetsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Sets(decoded));
            }
            if let Ok(decoded) = <StateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::State(decoded));
            }
            if let Ok(decoded) = <TriggerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Trigger(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FlexibleTriggerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::MaxSetLength(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Acknowledge(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Acknowledged(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::AddSet(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Boss(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Freeze(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::FreezeTime(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Freezers(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetSets(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetSetsLength(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::IsAutoTrigger(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Manager(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::MaxFreezeDuration(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::PublicTrigger(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Resume(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RunProgrammaticCheck(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Sets(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::State(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Trigger(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for FlexibleTriggerCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::MaxSetLength(element) => ::core::fmt::Display::fmt(element, f),
                Self::Acknowledge(element) => ::core::fmt::Display::fmt(element, f),
                Self::Acknowledged(element) => ::core::fmt::Display::fmt(element, f),
                Self::AddSet(element) => ::core::fmt::Display::fmt(element, f),
                Self::Boss(element) => ::core::fmt::Display::fmt(element, f),
                Self::Freeze(element) => ::core::fmt::Display::fmt(element, f),
                Self::FreezeTime(element) => ::core::fmt::Display::fmt(element, f),
                Self::Freezers(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetSets(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetSetsLength(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsAutoTrigger(element) => ::core::fmt::Display::fmt(element, f),
                Self::Manager(element) => ::core::fmt::Display::fmt(element, f),
                Self::MaxFreezeDuration(element) => ::core::fmt::Display::fmt(element, f),
                Self::PublicTrigger(element) => ::core::fmt::Display::fmt(element, f),
                Self::Resume(element) => ::core::fmt::Display::fmt(element, f),
                Self::RunProgrammaticCheck(element) => ::core::fmt::Display::fmt(element, f),
                Self::Sets(element) => ::core::fmt::Display::fmt(element, f),
                Self::State(element) => ::core::fmt::Display::fmt(element, f),
                Self::Trigger(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<MaxSetLengthCall> for FlexibleTriggerCalls {
        fn from(value: MaxSetLengthCall) -> Self {
            Self::MaxSetLength(value)
        }
    }
    impl ::core::convert::From<AcknowledgeCall> for FlexibleTriggerCalls {
        fn from(value: AcknowledgeCall) -> Self {
            Self::Acknowledge(value)
        }
    }
    impl ::core::convert::From<AcknowledgedCall> for FlexibleTriggerCalls {
        fn from(value: AcknowledgedCall) -> Self {
            Self::Acknowledged(value)
        }
    }
    impl ::core::convert::From<AddSetCall> for FlexibleTriggerCalls {
        fn from(value: AddSetCall) -> Self {
            Self::AddSet(value)
        }
    }
    impl ::core::convert::From<BossCall> for FlexibleTriggerCalls {
        fn from(value: BossCall) -> Self {
            Self::Boss(value)
        }
    }
    impl ::core::convert::From<FreezeCall> for FlexibleTriggerCalls {
        fn from(value: FreezeCall) -> Self {
            Self::Freeze(value)
        }
    }
    impl ::core::convert::From<FreezeTimeCall> for FlexibleTriggerCalls {
        fn from(value: FreezeTimeCall) -> Self {
            Self::FreezeTime(value)
        }
    }
    impl ::core::convert::From<FreezersCall> for FlexibleTriggerCalls {
        fn from(value: FreezersCall) -> Self {
            Self::Freezers(value)
        }
    }
    impl ::core::convert::From<GetSetsCall> for FlexibleTriggerCalls {
        fn from(value: GetSetsCall) -> Self {
            Self::GetSets(value)
        }
    }
    impl ::core::convert::From<GetSetsLengthCall> for FlexibleTriggerCalls {
        fn from(value: GetSetsLengthCall) -> Self {
            Self::GetSetsLength(value)
        }
    }
    impl ::core::convert::From<IsAutoTriggerCall> for FlexibleTriggerCalls {
        fn from(value: IsAutoTriggerCall) -> Self {
            Self::IsAutoTrigger(value)
        }
    }
    impl ::core::convert::From<ManagerCall> for FlexibleTriggerCalls {
        fn from(value: ManagerCall) -> Self {
            Self::Manager(value)
        }
    }
    impl ::core::convert::From<MaxFreezeDurationCall> for FlexibleTriggerCalls {
        fn from(value: MaxFreezeDurationCall) -> Self {
            Self::MaxFreezeDuration(value)
        }
    }
    impl ::core::convert::From<PublicTriggerCall> for FlexibleTriggerCalls {
        fn from(value: PublicTriggerCall) -> Self {
            Self::PublicTrigger(value)
        }
    }
    impl ::core::convert::From<ResumeCall> for FlexibleTriggerCalls {
        fn from(value: ResumeCall) -> Self {
            Self::Resume(value)
        }
    }
    impl ::core::convert::From<RunProgrammaticCheckCall> for FlexibleTriggerCalls {
        fn from(value: RunProgrammaticCheckCall) -> Self {
            Self::RunProgrammaticCheck(value)
        }
    }
    impl ::core::convert::From<SetsCall> for FlexibleTriggerCalls {
        fn from(value: SetsCall) -> Self {
            Self::Sets(value)
        }
    }
    impl ::core::convert::From<StateCall> for FlexibleTriggerCalls {
        fn from(value: StateCall) -> Self {
            Self::State(value)
        }
    }
    impl ::core::convert::From<TriggerCall> for FlexibleTriggerCalls {
        fn from(value: TriggerCall) -> Self {
            Self::Trigger(value)
        }
    }
    ///Container type for all return fields from the `MAX_SET_LENGTH` function with signature `MAX_SET_LENGTH()` and selector `0x59537144`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MaxSetLengthReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `acknowledged` function with signature `acknowledged()` and selector `0x086c298d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct AcknowledgedReturn(pub bool);
    ///Container type for all return fields from the `addSet` function with signature `addSet(address)` and selector `0xd580ded4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct AddSetReturn(pub bool);
    ///Container type for all return fields from the `boss` function with signature `boss()` and selector `0xc772af39`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct BossReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `freezeTime` function with signature `freezeTime()` and selector `0xfd7e1bee`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct FreezeTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `freezers` function with signature `freezers(address)` and selector `0x1f816352`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct FreezersReturn(pub bool);
    ///Container type for all return fields from the `getSets` function with signature `getSets()` and selector `0x2cf7c531`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetSetsReturn(pub ::std::vec::Vec<::ethers::core::types::Address>);
    ///Container type for all return fields from the `getSetsLength` function with signature `getSetsLength()` and selector `0xe86376c5`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetSetsLengthReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isAutoTrigger` function with signature `isAutoTrigger()` and selector `0xa2ce3d49`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsAutoTriggerReturn(pub bool);
    ///Container type for all return fields from the `manager` function with signature `manager()` and selector `0x481c6a75`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ManagerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `maxFreezeDuration` function with signature `maxFreezeDuration()` and selector `0xc2b758e1`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MaxFreezeDurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `runProgrammaticCheck` function with signature `runProgrammaticCheck()` and selector `0x37a0afc1`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RunProgrammaticCheckReturn(pub u8);
    ///Container type for all return fields from the `sets` function with signature `sets(uint256)` and selector `0x5b227f9b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct SetsReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `state` function with signature `state()` and selector `0xc19d93fb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct StateReturn(pub u8);
}
