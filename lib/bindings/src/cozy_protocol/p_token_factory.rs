pub use p_token_factory::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod p_token_factory {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract IPToken\",\"name\":\"ptokenLogic_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidAddress\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IPToken\",\"name\":\"ptoken_\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"contract ISet\",\"name\":\"set_\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"contract ITrigger\",\"name\":\"trigger_\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PTokenDeployed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract ISet\",\"name\":\"set_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ITrigger\",\"name\":\"trigger_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"contract ITrigger\",\"name\":\"trigger_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployPToken\",\"outputs\":[{\"internalType\":\"contract IPToken\",\"name\":\"ptoken_\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ptokenLogic\",\"outputs\":[{\"internalType\":\"contract IPToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract ISet\",\"name\":\"set_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ITrigger\",\"name\":\"trigger_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static PTOKENFACTORY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        52,
        97,
        0,
        142,
        87,
        96,
        31,
        97,
        4,
        85,
        56,
        129,
        144,
        3,
        145,
        130,
        1,
        96,
        31,
        25,
        22,
        131,
        1,
        145,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        131,
        17,
        132,
        132,
        16,
        23,
        97,
        0,
        147,
        87,
        128,
        132,
        146,
        96,
        32,
        148,
        96,
        64,
        82,
        131,
        57,
        129,
        1,
        3,
        18,
        97,
        0,
        142,
        87,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        128,
        130,
        3,
        97,
        0,
        142,
        87,
        21,
        97,
        0,
        124,
        87,
        96,
        128,
        82,
        96,
        64,
        81,
        97,
        3,
        171,
        144,
        129,
        97,
        0,
        170,
        130,
        57,
        96,
        128,
        81,
        129,
        129,
        129,
        96,
        94,
        1,
        82,
        129,
        129,
        96,
        206,
        1,
        82,
        97,
        1,
        191,
        1,
        82,
        243,
        91,
        96,
        64,
        81,
        99,
        230,
        196,
        36,
        123,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        144,
        253,
        91,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        96,
        64,
        96,
        128,
        129,
        82,
        96,
        4,
        54,
        16,
        21,
        97,
        0,
        19,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        144,
        129,
        53,
        96,
        224,
        28,
        128,
        99,
        51,
        11,
        147,
        25,
        20,
        97,
        1,
        97,
        87,
        128,
        99,
        170,
        144,
        20,
        82,
        20,
        97,
        1,
        69,
        87,
        128,
        99,
        235,
        7,
        141,
        249,
        20,
        97,
        0,
        145,
        87,
        99,
        251,
        42,
        191,
        89,
        20,
        97,
        0,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        141,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        0,
        141,
        87,
        81,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        80,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        96,
        32,
        144,
        96,
        85,
        96,
        55,
        97,
        0,
        176,
        97,
        0,
        170,
        54,
        97,
        3,
        9,
        86,
        91,
        144,
        97,
        3,
        63,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        111,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        255,
        96,
        128,
        27,
        96,
        40,
        131,
        1,
        82,
        48,
        144,
        27,
        96,
        56,
        130,
        1,
        82,
        96,
        76,
        129,
        1,
        145,
        144,
        145,
        82,
        129,
        129,
        32,
        96,
        108,
        130,
        1,
        82,
        1,
        32,
        144,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        96,
        32,
        144,
        97,
        1,
        90,
        97,
        0,
        170,
        54,
        97,
        3,
        9,
        86,
        91,
        144,
        81,
        144,
        129,
        82,
        243,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        128,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        0,
        141,
        87,
        96,
        4,
        53,
        144,
        96,
        255,
        130,
        22,
        128,
        146,
        3,
        97,
        3,
        5,
        87,
        96,
        36,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        145,
        130,
        129,
        3,
        97,
        3,
        1,
        87,
        97,
        1,
        161,
        144,
        51,
        97,
        3,
        63,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        130,
        1,
        82,
        110,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        96,
        136,
        27,
        96,
        40,
        130,
        1,
        82,
        96,
        55,
        144,
        135,
        245,
        22,
        146,
        131,
        21,
        97,
        2,
        195,
        87,
        131,
        59,
        21,
        97,
        2,
        191,
        87,
        130,
        81,
        98,
        68,
        145,
        149,
        96,
        233,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        130,
        96,
        36,
        130,
        1,
        82,
        129,
        96,
        68,
        130,
        1,
        82,
        133,
        129,
        96,
        100,
        129,
        131,
        137,
        90,
        241,
        128,
        21,
        97,
        2,
        181,
        87,
        97,
        2,
        135,
        87,
        91,
        80,
        96,
        32,
        148,
        80,
        130,
        81,
        144,
        132,
        130,
        82,
        133,
        130,
        1,
        82,
        127,
        108,
        181,
        88,
        251,
        107,
        45,
        0,
        141,
        81,
        32,
        225,
        118,
        203,
        125,
        95,
        24,
        106,
        231,
        22,
        110,
        230,
        225,
        43,
        36,
        27,
        84,
        85,
        36,
        86,
        187,
        203,
        164,
        131,
        51,
        146,
        163,
        81,
        144,
        129,
        82,
        243,
        91,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        97,
        2,
        161,
        87,
        96,
        32,
        149,
        80,
        131,
        82,
        56,
        97,
        2,
        77,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        134,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        134,
        253,
        91,
        132,
        81,
        61,
        136,
        130,
        62,
        61,
        144,
        253,
        91,
        132,
        128,
        253,
        91,
        130,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        23,
        96,
        36,
        130,
        1,
        82,
        118,
        17,
        84,
        144,
        204,
        76,
        77,
        141,
        206,
        136,
        24,
        220,
        153,
        88,
        93,
        25,
        76,
        136,
        25,
        152,
        90,
        91,
        25,
        89,
        96,
        74,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        144,
        253,
        91,
        133,
        128,
        253,
        91,
        130,
        128,
        253,
        91,
        96,
        64,
        144,
        96,
        3,
        25,
        1,
        18,
        97,
        3,
        58,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        96,
        4,
        53,
        130,
        129,
        22,
        129,
        3,
        97,
        3,
        58,
        87,
        145,
        96,
        36,
        53,
        144,
        129,
        22,
        129,
        3,
        97,
        3,
        58,
        87,
        144,
        86,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        96,
        32,
        130,
        1,
        144,
        129,
        82,
        147,
        144,
        146,
        22,
        144,
        130,
        1,
        82,
        70,
        96,
        96,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        129,
        82,
        96,
        128,
        129,
        1,
        129,
        129,
        16,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        130,
        17,
        23,
        97,
        3,
        136,
        87,
        96,
        64,
        82,
        81,
        144,
        32,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        10,
    ];
    ///The bytecode of the contract.
    pub static PTOKENFACTORY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        64,
        96,
        128,
        129,
        82,
        96,
        4,
        54,
        16,
        21,
        97,
        0,
        19,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        144,
        129,
        53,
        96,
        224,
        28,
        128,
        99,
        51,
        11,
        147,
        25,
        20,
        97,
        1,
        97,
        87,
        128,
        99,
        170,
        144,
        20,
        82,
        20,
        97,
        1,
        69,
        87,
        128,
        99,
        235,
        7,
        141,
        249,
        20,
        97,
        0,
        145,
        87,
        99,
        251,
        42,
        191,
        89,
        20,
        97,
        0,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        141,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        0,
        141,
        87,
        81,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        80,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        96,
        32,
        144,
        96,
        85,
        96,
        55,
        97,
        0,
        176,
        97,
        0,
        170,
        54,
        97,
        3,
        9,
        86,
        91,
        144,
        97,
        3,
        63,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        111,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        255,
        96,
        128,
        27,
        96,
        40,
        131,
        1,
        82,
        48,
        144,
        27,
        96,
        56,
        130,
        1,
        82,
        96,
        76,
        129,
        1,
        145,
        144,
        145,
        82,
        129,
        129,
        32,
        96,
        108,
        130,
        1,
        82,
        1,
        32,
        144,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        96,
        32,
        144,
        97,
        1,
        90,
        97,
        0,
        170,
        54,
        97,
        3,
        9,
        86,
        91,
        144,
        81,
        144,
        129,
        82,
        243,
        91,
        80,
        52,
        97,
        0,
        141,
        87,
        128,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        0,
        141,
        87,
        96,
        4,
        53,
        144,
        96,
        255,
        130,
        22,
        128,
        146,
        3,
        97,
        3,
        5,
        87,
        96,
        36,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        145,
        130,
        129,
        3,
        97,
        3,
        1,
        87,
        97,
        1,
        161,
        144,
        51,
        97,
        3,
        63,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        130,
        1,
        82,
        110,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        96,
        136,
        27,
        96,
        40,
        130,
        1,
        82,
        96,
        55,
        144,
        135,
        245,
        22,
        146,
        131,
        21,
        97,
        2,
        195,
        87,
        131,
        59,
        21,
        97,
        2,
        191,
        87,
        130,
        81,
        98,
        68,
        145,
        149,
        96,
        233,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        130,
        96,
        36,
        130,
        1,
        82,
        129,
        96,
        68,
        130,
        1,
        82,
        133,
        129,
        96,
        100,
        129,
        131,
        137,
        90,
        241,
        128,
        21,
        97,
        2,
        181,
        87,
        97,
        2,
        135,
        87,
        91,
        80,
        96,
        32,
        148,
        80,
        130,
        81,
        144,
        132,
        130,
        82,
        133,
        130,
        1,
        82,
        127,
        108,
        181,
        88,
        251,
        107,
        45,
        0,
        141,
        81,
        32,
        225,
        118,
        203,
        125,
        95,
        24,
        106,
        231,
        22,
        110,
        230,
        225,
        43,
        36,
        27,
        84,
        85,
        36,
        86,
        187,
        203,
        164,
        131,
        51,
        146,
        163,
        81,
        144,
        129,
        82,
        243,
        91,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        97,
        2,
        161,
        87,
        96,
        32,
        149,
        80,
        131,
        82,
        56,
        97,
        2,
        77,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        134,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        134,
        253,
        91,
        132,
        81,
        61,
        136,
        130,
        62,
        61,
        144,
        253,
        91,
        132,
        128,
        253,
        91,
        130,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        23,
        96,
        36,
        130,
        1,
        82,
        118,
        17,
        84,
        144,
        204,
        76,
        77,
        141,
        206,
        136,
        24,
        220,
        153,
        88,
        93,
        25,
        76,
        136,
        25,
        152,
        90,
        91,
        25,
        89,
        96,
        74,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        144,
        253,
        91,
        133,
        128,
        253,
        91,
        130,
        128,
        253,
        91,
        96,
        64,
        144,
        96,
        3,
        25,
        1,
        18,
        97,
        3,
        58,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        96,
        4,
        53,
        130,
        129,
        22,
        129,
        3,
        97,
        3,
        58,
        87,
        145,
        96,
        36,
        53,
        144,
        129,
        22,
        129,
        3,
        97,
        3,
        58,
        87,
        144,
        86,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        96,
        32,
        130,
        1,
        144,
        129,
        82,
        147,
        144,
        146,
        22,
        144,
        130,
        1,
        82,
        70,
        96,
        96,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        129,
        82,
        96,
        128,
        129,
        1,
        129,
        129,
        16,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        130,
        17,
        23,
        97,
        3,
        136,
        87,
        96,
        64,
        82,
        81,
        144,
        32,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        10,
    ];
    ///The deployed bytecode of the contract.
    pub static PTOKENFACTORY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct PTokenFactory<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PTokenFactory<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PTokenFactory<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PTokenFactory<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PTokenFactory<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(PTokenFactory)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PTokenFactory<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    PTOKENFACTORY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PTOKENFACTORY_ABI.clone(),
                PTOKENFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `computeAddress` (0xeb078df9) function
        pub fn compute_address(
            &self,
            set: ::ethers::core::types::Address,
            trigger: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([235, 7, 141, 249], (set, trigger))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deployPToken` (0x330b9319) function
        pub fn deploy_p_token(
            &self,
            decimals: u8,
            trigger: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([51, 11, 147, 25], (decimals, trigger))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ptokenLogic` (0xfb2abf59) function
        pub fn ptoken_logic(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([251, 42, 191, 89], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `salt` (0xaa901452) function
        pub fn salt(
            &self,
            set: ::ethers::core::types::Address,
            trigger: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([170, 144, 20, 82], (set, trigger))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `PTokenDeployed` event
        pub fn p_token_deployed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PtokenDeployedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PtokenDeployedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for PTokenFactory<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidAddress` with signature `InvalidAddress()` and selector `0xe6c4247b`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidAddress", abi = "InvalidAddress()")]
    pub struct InvalidAddress;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "PTokenDeployed",
        abi = "PTokenDeployed(address,address,address,uint8)"
    )]
    pub struct PtokenDeployedFilter {
        pub ptoken: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub set: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trigger: ::ethers::core::types::Address,
        pub decimals: u8,
    }
    ///Container type for all input parameters for the `computeAddress` function with signature `computeAddress(address,address)` and selector `0xeb078df9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "computeAddress", abi = "computeAddress(address,address)")]
    pub struct ComputeAddressCall {
        pub set: ::ethers::core::types::Address,
        pub trigger: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `deployPToken` function with signature `deployPToken(uint8,address)` and selector `0x330b9319`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deployPToken", abi = "deployPToken(uint8,address)")]
    pub struct DeployPTokenCall {
        pub decimals: u8,
        pub trigger: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `ptokenLogic` function with signature `ptokenLogic()` and selector `0xfb2abf59`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ptokenLogic", abi = "ptokenLogic()")]
    pub struct PtokenLogicCall;
    ///Container type for all input parameters for the `salt` function with signature `salt(address,address)` and selector `0xaa901452`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "salt", abi = "salt(address,address)")]
    pub struct SaltCall {
        pub set: ::ethers::core::types::Address,
        pub trigger: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PTokenFactoryCalls {
        ComputeAddress(ComputeAddressCall),
        DeployPToken(DeployPTokenCall),
        PtokenLogic(PtokenLogicCall),
        Salt(SaltCall),
    }
    impl ::ethers::core::abi::AbiDecode for PTokenFactoryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <ComputeAddressCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ComputeAddress(decoded));
            }
            if let Ok(decoded)
                = <DeployPTokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::DeployPToken(decoded));
            }
            if let Ok(decoded)
                = <PtokenLogicCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::PtokenLogic(decoded));
            }
            if let Ok(decoded)
                = <SaltCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Salt(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PTokenFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ComputeAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::DeployPToken(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::PtokenLogic(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Salt(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for PTokenFactoryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ComputeAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::DeployPToken(element) => ::core::fmt::Display::fmt(element, f),
                Self::PtokenLogic(element) => ::core::fmt::Display::fmt(element, f),
                Self::Salt(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ComputeAddressCall> for PTokenFactoryCalls {
        fn from(value: ComputeAddressCall) -> Self {
            Self::ComputeAddress(value)
        }
    }
    impl ::core::convert::From<DeployPTokenCall> for PTokenFactoryCalls {
        fn from(value: DeployPTokenCall) -> Self {
            Self::DeployPToken(value)
        }
    }
    impl ::core::convert::From<PtokenLogicCall> for PTokenFactoryCalls {
        fn from(value: PtokenLogicCall) -> Self {
            Self::PtokenLogic(value)
        }
    }
    impl ::core::convert::From<SaltCall> for PTokenFactoryCalls {
        fn from(value: SaltCall) -> Self {
            Self::Salt(value)
        }
    }
    ///Container type for all return fields from the `computeAddress` function with signature `computeAddress(address,address)` and selector `0xeb078df9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ComputeAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `deployPToken` function with signature `deployPToken(uint8,address)` and selector `0x330b9319`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DeployPTokenReturn {
        pub ptoken: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `ptokenLogic` function with signature `ptokenLogic()` and selector `0xfb2abf59`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PtokenLogicReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `salt` function with signature `salt(address,address)` and selector `0xaa901452`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SaltReturn(pub [u8; 32]);
}
