pub use set_factory::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod set_factory {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract IManager\",\"name\":\"manager_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ISet\",\"name\":\"setLogic_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidAddress\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Unauthorized\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract ISet\",\"name\":\"set\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"SetDeployed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseSalt_\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"pauser_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"struct SetConfig\",\"name\":\"setConfig_\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint32\",\"name\":\"leverageFactor\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"depositFee\",\"type\":\"uint16\",\"components\":[]}]},{\"internalType\":\"struct MarketConfig[]\",\"name\":\"marketConfigs_\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"contract ITrigger\",\"name\":\"trigger\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract ICostModel\",\"name\":\"costModel\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IDripDecayModel\",\"name\":\"dripDecayModel\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"purchaseFee\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"saleFee\",\"type\":\"uint16\",\"components\":[]}]},{\"internalType\":\"bytes32\",\"name\":\"baseSalt_\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploySet\",\"outputs\":[{\"internalType\":\"contract ISet\",\"name\":\"set_\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseSalt_\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"setLogic\",\"outputs\":[{\"internalType\":\"contract ISet\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static SETFACTORY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        192,
        52,
        97,
        0,
        173,
        87,
        96,
        31,
        97,
        6,
        84,
        56,
        129,
        144,
        3,
        145,
        130,
        1,
        96,
        31,
        25,
        22,
        131,
        1,
        145,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        131,
        17,
        132,
        132,
        16,
        23,
        97,
        0,
        178,
        87,
        128,
        132,
        146,
        96,
        64,
        148,
        133,
        82,
        131,
        57,
        129,
        1,
        3,
        18,
        97,
        0,
        173,
        87,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        130,
        22,
        144,
        129,
        131,
        3,
        97,
        0,
        173,
        87,
        96,
        32,
        1,
        81,
        146,
        131,
        22,
        128,
        132,
        3,
        97,
        0,
        173,
        87,
        97,
        0,
        109,
        97,
        0,
        114,
        146,
        97,
        0,
        200,
        86,
        91,
        97,
        0,
        200,
        86,
        91,
        96,
        128,
        82,
        96,
        160,
        82,
        96,
        64,
        81,
        97,
        5,
        105,
        144,
        129,
        97,
        0,
        235,
        130,
        57,
        96,
        128,
        81,
        129,
        129,
        129,
        97,
        2,
        19,
        1,
        82,
        97,
        4,
        209,
        1,
        82,
        96,
        160,
        81,
        129,
        129,
        129,
        96,
        196,
        1,
        82,
        129,
        129,
        97,
        1,
        80,
        1,
        82,
        97,
        2,
        98,
        1,
        82,
        243,
        91,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        21,
        97,
        0,
        216,
        87,
        86,
        91,
        96,
        64,
        81,
        99,
        230,
        196,
        36,
        123,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        144,
        253,
        254,
        96,
        128,
        96,
        64,
        129,
        129,
        82,
        96,
        4,
        145,
        130,
        54,
        16,
        21,
        97,
        0,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        144,
        129,
        53,
        96,
        224,
        28,
        144,
        129,
        99,
        72,
        28,
        106,
        117,
        20,
        97,
        4,
        189,
        87,
        80,
        128,
        99,
        117,
        216,
        92,
        98,
        20,
        97,
        1,
        131,
        87,
        128,
        99,
        118,
        23,
        135,
        78,
        20,
        97,
        1,
        59,
        87,
        128,
        99,
        127,
        222,
        86,
        218,
        20,
        97,
        0,
        131,
        87,
        99,
        143,
        156,
        170,
        137,
        20,
        97,
        0,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        128,
        87,
        96,
        32,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        0,
        128,
        87,
        80,
        97,
        0,
        121,
        96,
        32,
        146,
        53,
        97,
        5,
        20,
        86,
        91,
        144,
        81,
        144,
        129,
        82,
        243,
        91,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        128,
        87,
        96,
        32,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        0,
        128,
        87,
        80,
        96,
        85,
        96,
        55,
        97,
        0,
        166,
        96,
        32,
        148,
        53,
        97,
        5,
        20,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        111,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        255,
        96,
        128,
        27,
        96,
        40,
        131,
        1,
        82,
        48,
        144,
        27,
        96,
        56,
        130,
        1,
        82,
        96,
        76,
        129,
        1,
        145,
        144,
        145,
        82,
        129,
        129,
        32,
        96,
        108,
        130,
        1,
        82,
        1,
        32,
        144,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        144,
        52,
        97,
        1,
        127,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        1,
        127,
        87,
        81,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        80,
        128,
        253,
        91,
        80,
        144,
        52,
        97,
        1,
        127,
        87,
        96,
        224,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        1,
        127,
        87,
        130,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        146,
        145,
        131,
        144,
        3,
        97,
        4,
        185,
        87,
        96,
        36,
        147,
        132,
        53,
        149,
        130,
        135,
        22,
        128,
        151,
        3,
        97,
        1,
        127,
        87,
        96,
        68,
        53,
        146,
        128,
        132,
        22,
        128,
        148,
        3,
        97,
        4,
        181,
        87,
        132,
        96,
        99,
        25,
        54,
        1,
        18,
        97,
        4,
        181,
        87,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        144,
        96,
        164,
        53,
        144,
        130,
        130,
        17,
        97,
        4,
        177,
        87,
        54,
        96,
        35,
        131,
        1,
        18,
        21,
        97,
        4,
        177,
        87,
        129,
        132,
        1,
        53,
        144,
        131,
        130,
        17,
        97,
        4,
        173,
        87,
        96,
        192,
        144,
        54,
        139,
        131,
        133,
        2,
        134,
        1,
        1,
        17,
        97,
        4,
        169,
        87,
        128,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        4,
        154,
        87,
        97,
        2,
        68,
        96,
        196,
        53,
        97,
        5,
        20,
        86,
        91,
        137,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        110,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        96,
        136,
        27,
        96,
        40,
        131,
        1,
        82,
        155,
        145,
        131,
        145,
        96,
        55,
        144,
        139,
        245,
        22,
        154,
        139,
        21,
        97,
        4,
        94,
        87,
        139,
        59,
        21,
        97,
        4,
        90,
        87,
        140,
        157,
        139,
        156,
        157,
        154,
        155,
        81,
        154,
        99,
        126,
        15,
        114,
        253,
        96,
        224,
        27,
        140,
        82,
        96,
        196,
        140,
        1,
        147,
        138,
        141,
        1,
        82,
        139,
        1,
        82,
        138,
        96,
        68,
        139,
        1,
        82,
        96,
        100,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        86,
        87,
        96,
        100,
        139,
        1,
        82,
        96,
        132,
        53,
        145,
        97,
        255,
        255,
        146,
        131,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        82,
        87,
        146,
        143,
        135,
        140,
        153,
        151,
        148,
        150,
        147,
        142,
        153,
        150,
        96,
        132,
        139,
        1,
        82,
        133,
        96,
        164,
        139,
        1,
        82,
        82,
        96,
        228,
        136,
        1,
        150,
        1,
        148,
        136,
        146,
        91,
        133,
        132,
        16,
        97,
        3,
        187,
        87,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        129,
        144,
        3,
        129,
        131,
        139,
        90,
        241,
        128,
        21,
        97,
        3,
        177,
        87,
        97,
        3,
        136,
        87,
        91,
        96,
        32,
        135,
        135,
        135,
        127,
        27,
        248,
        255,
        246,
        26,
        72,
        47,
        33,
        237,
        203,
        73,
        34,
        109,
        112,
        143,
        82,
        85,
        179,
        224,
        107,
        185,
        198,
        72,
        88,
        146,
        160,
        87,
        5,
        139,
        73,
        71,
        144,
        132,
        131,
        81,
        133,
        129,
        82,
        162,
        81,
        144,
        129,
        82,
        243,
        91,
        131,
        17,
        97,
        3,
        159,
        87,
        80,
        80,
        96,
        32,
        148,
        80,
        130,
        82,
        56,
        128,
        128,
        128,
        97,
        3,
        85,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        130,
        82,
        96,
        65,
        144,
        82,
        133,
        144,
        253,
        91,
        134,
        81,
        61,
        133,
        130,
        62,
        61,
        144,
        253,
        91,
        146,
        149,
        152,
        80,
        146,
        149,
        144,
        147,
        150,
        80,
        135,
        53,
        130,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        74,
        87,
        129,
        82,
        96,
        32,
        128,
        137,
        1,
        53,
        144,
        131,
        130,
        22,
        128,
        146,
        3,
        97,
        4,
        78,
        87,
        130,
        1,
        82,
        141,
        136,
        1,
        53,
        130,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        74,
        87,
        134,
        143,
        146,
        129,
        146,
        96,
        1,
        148,
        130,
        1,
        82,
        134,
        97,
        4,
        12,
        135,
        141,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        129,
        135,
        1,
        82,
        96,
        128,
        135,
        97,
        4,
        31,
        130,
        142,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        144,
        130,
        1,
        82,
        96,
        160,
        135,
        97,
        4,
        50,
        130,
        142,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        144,
        130,
        1,
        82,
        1,
        152,
        1,
        148,
        1,
        144,
        146,
        138,
        151,
        149,
        146,
        140,
        151,
        148,
        97,
        3,
        52,
        86,
        91,
        139,
        128,
        253,
        91,
        140,
        128,
        253,
        91,
        138,
        128,
        253,
        91,
        137,
        128,
        253,
        91,
        136,
        128,
        253,
        91,
        138,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        129,
        138,
        1,
        82,
        96,
        23,
        129,
        143,
        1,
        82,
        118,
        17,
        84,
        144,
        204,
        76,
        77,
        141,
        206,
        136,
        24,
        220,
        153,
        88,
        93,
        25,
        76,
        136,
        25,
        152,
        90,
        91,
        25,
        89,
        96,
        74,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        144,
        253,
        91,
        136,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        134,
        144,
        253,
        91,
        134,
        128,
        253,
        91,
        133,
        128,
        253,
        91,
        132,
        128,
        253,
        91,
        130,
        128,
        253,
        91,
        131,
        128,
        253,
        91,
        144,
        80,
        52,
        97,
        1,
        127,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        1,
        127,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        53,
        144,
        97,
        255,
        255,
        130,
        22,
        130,
        3,
        97,
        5,
        15,
        87,
        86,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        131,
        82,
        70,
        129,
        131,
        1,
        82,
        144,
        129,
        82,
        96,
        96,
        129,
        1,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        130,
        130,
        16,
        23,
        97,
        5,
        70,
        87,
        96,
        64,
        82,
        81,
        144,
        32,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        10,
    ];
    ///The bytecode of the contract.
    pub static SETFACTORY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        129,
        129,
        82,
        96,
        4,
        145,
        130,
        54,
        16,
        21,
        97,
        0,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        144,
        129,
        53,
        96,
        224,
        28,
        144,
        129,
        99,
        72,
        28,
        106,
        117,
        20,
        97,
        4,
        189,
        87,
        80,
        128,
        99,
        117,
        216,
        92,
        98,
        20,
        97,
        1,
        131,
        87,
        128,
        99,
        118,
        23,
        135,
        78,
        20,
        97,
        1,
        59,
        87,
        128,
        99,
        127,
        222,
        86,
        218,
        20,
        97,
        0,
        131,
        87,
        99,
        143,
        156,
        170,
        137,
        20,
        97,
        0,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        128,
        87,
        96,
        32,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        0,
        128,
        87,
        80,
        97,
        0,
        121,
        96,
        32,
        146,
        53,
        97,
        5,
        20,
        86,
        91,
        144,
        81,
        144,
        129,
        82,
        243,
        91,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        128,
        87,
        96,
        32,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        0,
        128,
        87,
        80,
        96,
        85,
        96,
        55,
        97,
        0,
        166,
        96,
        32,
        148,
        53,
        97,
        5,
        20,
        86,
        91,
        131,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        111,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        255,
        96,
        128,
        27,
        96,
        40,
        131,
        1,
        82,
        48,
        144,
        27,
        96,
        56,
        130,
        1,
        82,
        96,
        76,
        129,
        1,
        145,
        144,
        145,
        82,
        129,
        129,
        32,
        96,
        108,
        130,
        1,
        82,
        1,
        32,
        144,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        144,
        52,
        97,
        1,
        127,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        1,
        127,
        87,
        81,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        80,
        128,
        253,
        91,
        80,
        144,
        52,
        97,
        1,
        127,
        87,
        96,
        224,
        54,
        96,
        3,
        25,
        1,
        18,
        97,
        1,
        127,
        87,
        130,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        146,
        145,
        131,
        144,
        3,
        97,
        4,
        185,
        87,
        96,
        36,
        147,
        132,
        53,
        149,
        130,
        135,
        22,
        128,
        151,
        3,
        97,
        1,
        127,
        87,
        96,
        68,
        53,
        146,
        128,
        132,
        22,
        128,
        148,
        3,
        97,
        4,
        181,
        87,
        132,
        96,
        99,
        25,
        54,
        1,
        18,
        97,
        4,
        181,
        87,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        144,
        96,
        164,
        53,
        144,
        130,
        130,
        17,
        97,
        4,
        177,
        87,
        54,
        96,
        35,
        131,
        1,
        18,
        21,
        97,
        4,
        177,
        87,
        129,
        132,
        1,
        53,
        144,
        131,
        130,
        17,
        97,
        4,
        173,
        87,
        96,
        192,
        144,
        54,
        139,
        131,
        133,
        2,
        134,
        1,
        1,
        17,
        97,
        4,
        169,
        87,
        128,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        3,
        97,
        4,
        154,
        87,
        97,
        2,
        68,
        96,
        196,
        53,
        97,
        5,
        20,
        86,
        91,
        137,
        81,
        115,
        61,
        96,
        45,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        115,
        96,
        96,
        27,
        129,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        144,
        129,
        27,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        25,
        22,
        96,
        20,
        131,
        1,
        82,
        110,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        43,
        87,
        253,
        91,
        243,
        96,
        136,
        27,
        96,
        40,
        131,
        1,
        82,
        155,
        145,
        131,
        145,
        96,
        55,
        144,
        139,
        245,
        22,
        154,
        139,
        21,
        97,
        4,
        94,
        87,
        139,
        59,
        21,
        97,
        4,
        90,
        87,
        140,
        157,
        139,
        156,
        157,
        154,
        155,
        81,
        154,
        99,
        126,
        15,
        114,
        253,
        96,
        224,
        27,
        140,
        82,
        96,
        196,
        140,
        1,
        147,
        138,
        141,
        1,
        82,
        139,
        1,
        82,
        138,
        96,
        68,
        139,
        1,
        82,
        96,
        100,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        86,
        87,
        96,
        100,
        139,
        1,
        82,
        96,
        132,
        53,
        145,
        97,
        255,
        255,
        146,
        131,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        82,
        87,
        146,
        143,
        135,
        140,
        153,
        151,
        148,
        150,
        147,
        142,
        153,
        150,
        96,
        132,
        139,
        1,
        82,
        133,
        96,
        164,
        139,
        1,
        82,
        82,
        96,
        228,
        136,
        1,
        150,
        1,
        148,
        136,
        146,
        91,
        133,
        132,
        16,
        97,
        3,
        187,
        87,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        129,
        144,
        3,
        129,
        131,
        139,
        90,
        241,
        128,
        21,
        97,
        3,
        177,
        87,
        97,
        3,
        136,
        87,
        91,
        96,
        32,
        135,
        135,
        135,
        127,
        27,
        248,
        255,
        246,
        26,
        72,
        47,
        33,
        237,
        203,
        73,
        34,
        109,
        112,
        143,
        82,
        85,
        179,
        224,
        107,
        185,
        198,
        72,
        88,
        146,
        160,
        87,
        5,
        139,
        73,
        71,
        144,
        132,
        131,
        81,
        133,
        129,
        82,
        162,
        81,
        144,
        129,
        82,
        243,
        91,
        131,
        17,
        97,
        3,
        159,
        87,
        80,
        80,
        96,
        32,
        148,
        80,
        130,
        82,
        56,
        128,
        128,
        128,
        97,
        3,
        85,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        130,
        82,
        96,
        65,
        144,
        82,
        133,
        144,
        253,
        91,
        134,
        81,
        61,
        133,
        130,
        62,
        61,
        144,
        253,
        91,
        146,
        149,
        152,
        80,
        146,
        149,
        144,
        147,
        150,
        80,
        135,
        53,
        130,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        74,
        87,
        129,
        82,
        96,
        32,
        128,
        137,
        1,
        53,
        144,
        131,
        130,
        22,
        128,
        146,
        3,
        97,
        4,
        78,
        87,
        130,
        1,
        82,
        141,
        136,
        1,
        53,
        130,
        129,
        22,
        128,
        145,
        3,
        97,
        4,
        74,
        87,
        134,
        143,
        146,
        129,
        146,
        96,
        1,
        148,
        130,
        1,
        82,
        134,
        97,
        4,
        12,
        135,
        141,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        129,
        135,
        1,
        82,
        96,
        128,
        135,
        97,
        4,
        31,
        130,
        142,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        144,
        130,
        1,
        82,
        96,
        160,
        135,
        97,
        4,
        50,
        130,
        142,
        1,
        97,
        5,
        0,
        86,
        91,
        22,
        144,
        130,
        1,
        82,
        1,
        152,
        1,
        148,
        1,
        144,
        146,
        138,
        151,
        149,
        146,
        140,
        151,
        148,
        97,
        3,
        52,
        86,
        91,
        139,
        128,
        253,
        91,
        140,
        128,
        253,
        91,
        138,
        128,
        253,
        91,
        137,
        128,
        253,
        91,
        136,
        128,
        253,
        91,
        138,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        129,
        138,
        1,
        82,
        96,
        23,
        129,
        143,
        1,
        82,
        118,
        17,
        84,
        144,
        204,
        76,
        77,
        141,
        206,
        136,
        24,
        220,
        153,
        88,
        93,
        25,
        76,
        136,
        25,
        152,
        90,
        91,
        25,
        89,
        96,
        74,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        144,
        253,
        91,
        136,
        81,
        98,
        130,
        180,
        41,
        96,
        232,
        27,
        129,
        82,
        134,
        144,
        253,
        91,
        134,
        128,
        253,
        91,
        133,
        128,
        253,
        91,
        132,
        128,
        253,
        91,
        130,
        128,
        253,
        91,
        131,
        128,
        253,
        91,
        144,
        80,
        52,
        97,
        1,
        127,
        87,
        129,
        96,
        3,
        25,
        54,
        1,
        18,
        97,
        1,
        127,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        144,
        243,
        91,
        53,
        144,
        97,
        255,
        255,
        130,
        22,
        130,
        3,
        97,
        5,
        15,
        87,
        86,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        131,
        82,
        70,
        129,
        131,
        1,
        82,
        144,
        129,
        82,
        96,
        96,
        129,
        1,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        130,
        130,
        16,
        23,
        97,
        5,
        70,
        87,
        96,
        64,
        82,
        81,
        144,
        32,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        10,
    ];
    ///The deployed bytecode of the contract.
    pub static SETFACTORY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct SetFactory<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SetFactory<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SetFactory<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SetFactory<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SetFactory<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SetFactory)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SetFactory<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SETFACTORY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SETFACTORY_ABI.clone(),
                SETFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `computeAddress` (0x7fde56da) function
        pub fn compute_address(
            &self,
            base_salt: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([127, 222, 86, 218], base_salt)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deploySet` (0x75d85c62) function
        pub fn deploy_set(
            &self,
            owner: ::ethers::core::types::Address,
            pauser: ::ethers::core::types::Address,
            asset: ::ethers::core::types::Address,
            set_config: SetConfig,
            market_configs: ::std::vec::Vec<MarketConfig>,
            base_salt: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash(
                    [117, 216, 92, 98],
                    (owner, pauser, asset, set_config, market_configs, base_salt),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `manager` (0x481c6a75) function
        pub fn manager(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([72, 28, 106, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `salt` (0x8f9caa89) function
        pub fn salt(
            &self,
            base_salt: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([143, 156, 170, 137], base_salt)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setLogic` (0x7617874e) function
        pub fn set_logic(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([118, 23, 135, 78], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `SetDeployed` event
        pub fn set_deployed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            SetDeployedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            SetDeployedFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for SetFactory<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidAddress` with signature `InvalidAddress()` and selector `0xe6c4247b`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidAddress", abi = "InvalidAddress()")]
    pub struct InvalidAddress;
    ///Custom Error type `Unauthorized` with signature `Unauthorized()` and selector `0x82b42900`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Unauthorized", abi = "Unauthorized()")]
    pub struct Unauthorized;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SetFactoryErrors {
        InvalidAddress(InvalidAddress),
        Unauthorized(Unauthorized),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for SetFactoryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <InvalidAddress as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidAddress(decoded));
            }
            if let Ok(decoded)
                = <Unauthorized as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Unauthorized(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SetFactoryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::InvalidAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Unauthorized(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for SetFactoryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <InvalidAddress as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Unauthorized as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for SetFactoryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::InvalidAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::Unauthorized(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for SetFactoryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<InvalidAddress> for SetFactoryErrors {
        fn from(value: InvalidAddress) -> Self {
            Self::InvalidAddress(value)
        }
    }
    impl ::core::convert::From<Unauthorized> for SetFactoryErrors {
        fn from(value: Unauthorized) -> Self {
            Self::Unauthorized(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "SetDeployed", abi = "SetDeployed(address,address)")]
    pub struct SetDeployedFilter {
        pub set: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub asset: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `computeAddress` function with signature `computeAddress(bytes32)` and selector `0x7fde56da`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "computeAddress", abi = "computeAddress(bytes32)")]
    pub struct ComputeAddressCall {
        pub base_salt: [u8; 32],
    }
    ///Container type for all input parameters for the `deploySet` function with signature `deploySet(address,address,address,(uint32,uint16),(address,address,address,uint16,uint16,uint16)[],bytes32)` and selector `0x75d85c62`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "deploySet",
        abi = "deploySet(address,address,address,(uint32,uint16),(address,address,address,uint16,uint16,uint16)[],bytes32)"
    )]
    pub struct DeploySetCall {
        pub owner: ::ethers::core::types::Address,
        pub pauser: ::ethers::core::types::Address,
        pub asset: ::ethers::core::types::Address,
        pub set_config: SetConfig,
        pub market_configs: ::std::vec::Vec<MarketConfig>,
        pub base_salt: [u8; 32],
    }
    ///Container type for all input parameters for the `manager` function with signature `manager()` and selector `0x481c6a75`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "manager", abi = "manager()")]
    pub struct ManagerCall;
    ///Container type for all input parameters for the `salt` function with signature `salt(bytes32)` and selector `0x8f9caa89`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "salt", abi = "salt(bytes32)")]
    pub struct SaltCall {
        pub base_salt: [u8; 32],
    }
    ///Container type for all input parameters for the `setLogic` function with signature `setLogic()` and selector `0x7617874e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setLogic", abi = "setLogic()")]
    pub struct SetLogicCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SetFactoryCalls {
        ComputeAddress(ComputeAddressCall),
        DeploySet(DeploySetCall),
        Manager(ManagerCall),
        Salt(SaltCall),
        SetLogic(SetLogicCall),
    }
    impl ::ethers::core::abi::AbiDecode for SetFactoryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <ComputeAddressCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ComputeAddress(decoded));
            }
            if let Ok(decoded)
                = <DeploySetCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::DeploySet(decoded));
            }
            if let Ok(decoded)
                = <ManagerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Manager(decoded));
            }
            if let Ok(decoded)
                = <SaltCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Salt(decoded));
            }
            if let Ok(decoded)
                = <SetLogicCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetLogic(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SetFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ComputeAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::DeploySet(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Manager(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Salt(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SetLogic(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SetFactoryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ComputeAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::DeploySet(element) => ::core::fmt::Display::fmt(element, f),
                Self::Manager(element) => ::core::fmt::Display::fmt(element, f),
                Self::Salt(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetLogic(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ComputeAddressCall> for SetFactoryCalls {
        fn from(value: ComputeAddressCall) -> Self {
            Self::ComputeAddress(value)
        }
    }
    impl ::core::convert::From<DeploySetCall> for SetFactoryCalls {
        fn from(value: DeploySetCall) -> Self {
            Self::DeploySet(value)
        }
    }
    impl ::core::convert::From<ManagerCall> for SetFactoryCalls {
        fn from(value: ManagerCall) -> Self {
            Self::Manager(value)
        }
    }
    impl ::core::convert::From<SaltCall> for SetFactoryCalls {
        fn from(value: SaltCall) -> Self {
            Self::Salt(value)
        }
    }
    impl ::core::convert::From<SetLogicCall> for SetFactoryCalls {
        fn from(value: SetLogicCall) -> Self {
            Self::SetLogic(value)
        }
    }
    ///Container type for all return fields from the `computeAddress` function with signature `computeAddress(bytes32)` and selector `0x7fde56da`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ComputeAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `deploySet` function with signature `deploySet(address,address,address,(uint32,uint16),(address,address,address,uint16,uint16,uint16)[],bytes32)` and selector `0x75d85c62`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DeploySetReturn {
        pub set: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `manager` function with signature `manager()` and selector `0x481c6a75`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ManagerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `salt` function with signature `salt(bytes32)` and selector `0x8f9caa89`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SaltReturn(pub [u8; 32]);
    ///Container type for all return fields from the `setLogic` function with signature `setLogic()` and selector `0x7617874e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SetLogicReturn(pub ::ethers::core::types::Address);
}
