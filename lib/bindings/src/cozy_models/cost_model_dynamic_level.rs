pub use cost_model_dynamic_level::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod cost_model_dynamic_level {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uLow_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"uHigh_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"costFactorAtZeroUtilization_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"costFactorAtFullUtilization_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"costFactorInOptimalZone_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"optimalZoneRate_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidConfiguration\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidReferencePoint\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidTime\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidUtilization\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"SetAlreadyRegistered\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Unauthorized\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"costFactorInOptimalZone\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedDynamicLevelModelParameters\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromUtilization_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"toUtilization_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"costFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"costFactorAtFullUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"costFactorAtZeroUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"costFactorInOptimalZone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optimalZoneRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromUtilization_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"toUtilization_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"refundFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"registerSet\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"setAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uHigh\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uLow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uOpt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"utilization_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newUtilization_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static COSTMODELDYNAMICLEVEL_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        97,
        1,
        64,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        17,
        151,
        56,
        3,
        128,
        98,
        0,
        17,
        151,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        50,
        145,
        97,
        1,
        71,
        86,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        133,
        17,
        21,
        97,
        0,
        91,
        87,
        96,
        64,
        81,
        99,
        197,
        42,
        155,
        211,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        132,
        134,
        17,
        21,
        97,
        0,
        124,
        87,
        96,
        64,
        81,
        99,
        197,
        42,
        155,
        211,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        131,
        17,
        21,
        97,
        0,
        165,
        87,
        96,
        64,
        81,
        99,
        197,
        42,
        155,
        211,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        131,
        131,
        16,
        21,
        97,
        0,
        198,
        87,
        96,
        64,
        81,
        99,
        197,
        42,
        155,
        211,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        128,
        134,
        144,
        82,
        96,
        160,
        133,
        144,
        82,
        97,
        0,
        244,
        96,
        1,
        96,
        2,
        97,
        0,
        225,
        136,
        138,
        97,
        1,
        145,
        86,
        91,
        97,
        1,
        25,
        96,
        32,
        27,
        97,
        5,
        139,
        23,
        144,
        146,
        145,
        144,
        96,
        32,
        28,
        86,
        91,
        96,
        192,
        82,
        96,
        224,
        147,
        144,
        147,
        82,
        97,
        1,
        0,
        145,
        144,
        145,
        82,
        97,
        1,
        32,
        145,
        144,
        145,
        82,
        96,
        0,
        85,
        80,
        80,
        66,
        96,
        1,
        85,
        97,
        1,
        184,
        86,
        91,
        130,
        130,
        2,
        129,
        21,
        21,
        132,
        21,
        133,
        131,
        4,
        133,
        20,
        23,
        22,
        97,
        1,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        130,
        96,
        1,
        131,
        3,
        4,
        1,
        129,
        21,
        21,
        2,
        144,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        192,
        135,
        137,
        3,
        18,
        21,
        97,
        1,
        96,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        81,
        149,
        80,
        96,
        32,
        135,
        1,
        81,
        148,
        80,
        96,
        64,
        135,
        1,
        81,
        147,
        80,
        96,
        96,
        135,
        1,
        81,
        146,
        80,
        96,
        128,
        135,
        1,
        81,
        145,
        80,
        96,
        160,
        135,
        1,
        81,
        144,
        80,
        146,
        149,
        80,
        146,
        149,
        80,
        146,
        149,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        1,
        178,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        96,
        224,
        81,
        97,
        1,
        0,
        81,
        97,
        1,
        32,
        81,
        97,
        14,
        162,
        98,
        0,
        2,
        245,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        96,
        243,
        1,
        82,
        97,
        10,
        76,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        11,
        1,
        82,
        129,
        129,
        97,
        10,
        125,
        1,
        82,
        97,
        12,
        140,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        180,
        1,
        82,
        129,
        129,
        97,
        6,
        191,
        1,
        82,
        129,
        129,
        97,
        7,
        184,
        1,
        82,
        129,
        129,
        97,
        10,
        216,
        1,
        82,
        129,
        129,
        97,
        11,
        6,
        1,
        82,
        97,
        11,
        187,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        122,
        1,
        82,
        129,
        129,
        97,
        9,
        234,
        1,
        82,
        129,
        129,
        97,
        10,
        27,
        1,
        82,
        97,
        10,
        173,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        219,
        1,
        82,
        129,
        129,
        97,
        6,
        26,
        1,
        82,
        129,
        129,
        97,
        6,
        83,
        1,
        82,
        129,
        129,
        97,
        8,
        19,
        1,
        82,
        129,
        129,
        97,
        8,
        143,
        1,
        82,
        129,
        129,
        97,
        8,
        182,
        1,
        82,
        129,
        129,
        97,
        9,
        17,
        1,
        82,
        129,
        129,
        97,
        9,
        69,
        1,
        82,
        129,
        129,
        97,
        9,
        108,
        1,
        82,
        129,
        129,
        97,
        9,
        149,
        1,
        82,
        129,
        129,
        97,
        11,
        245,
        1,
        82,
        129,
        129,
        97,
        12,
        45,
        1,
        82,
        97,
        12,
        89,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        45,
        1,
        82,
        129,
        129,
        97,
        6,
        145,
        1,
        82,
        129,
        129,
        97,
        7,
        50,
        1,
        82,
        129,
        129,
        97,
        7,
        103,
        1,
        82,
        129,
        129,
        97,
        7,
        148,
        1,
        82,
        129,
        129,
        97,
        7,
        234,
        1,
        82,
        129,
        129,
        97,
        8,
        64,
        1,
        82,
        129,
        129,
        97,
        8,
        103,
        1,
        82,
        129,
        129,
        97,
        8,
        222,
        1,
        82,
        129,
        129,
        97,
        11,
        60,
        1,
        82,
        129,
        129,
        97,
        11,
        100,
        1,
        82,
        97,
        11,
        146,
        1,
        82,
        97,
        14,
        162,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        233,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        185,
        42,
        98,
        15,
        17,
        97,
        0,
        140,
        87,
        128,
        99,
        207,
        208,
        250,
        201,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        207,
        208,
        250,
        201,
        20,
        97,
        2,
        6,
        87,
        128,
        99,
        215,
        200,
        86,
        179,
        20,
        97,
        2,
        45,
        87,
        128,
        99,
        224,
        53,
        203,
        202,
        20,
        97,
        2,
        64,
        87,
        128,
        99,
        230,
        86,
        146,
        117,
        20,
        97,
        2,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        185,
        42,
        98,
        15,
        20,
        97,
        1,
        175,
        87,
        128,
        99,
        188,
        198,
        240,
        18,
        20,
        97,
        1,
        214,
        87,
        128,
        99,
        200,
        243,
        60,
        145,
        20,
        97,
        1,
        253,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        59,
        27,
        101,
        32,
        17,
        97,
        0,
        200,
        87,
        128,
        99,
        59,
        27,
        101,
        32,
        20,
        97,
        1,
        100,
        87,
        128,
        99,
        117,
        223,
        40,
        38,
        20,
        97,
        1,
        108,
        87,
        128,
        99,
        128,
        163,
        175,
        54,
        20,
        97,
        1,
        117,
        87,
        128,
        99,
        172,
        2,
        59,
        117,
        20,
        97,
        1,
        156,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        61,
        254,
        96,
        20,
        97,
        0,
        238,
        87,
        128,
        99,
        4,
        171,
        54,
        201,
        20,
        97,
        1,
        40,
        87,
        128,
        99,
        47,
        181,
        101,
        232,
        20,
        97,
        1,
        79,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        98,
        97,
        1,
        93,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        2,
        152,
        86,
        91,
        0,
        91,
        97,
        1,
        98,
        97,
        3,
        64,
        86,
        91,
        97,
        1,
        21,
        96,
        0,
        84,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        97,
        1,
        170,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        3,
        226,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        96,
        1,
        84,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        97,
        2,
        59,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        3,
        253,
        86,
        91,
        97,
        1,
        21,
        97,
        2,
        78,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        4,
        229,
        86,
        91,
        96,
        2,
        84,
        97,
        2,
        115,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        31,
        86,
        91,
        96,
        2,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        51,
        20,
        97,
        2,
        233,
        87,
        96,
        64,
        81,
        127,
        130,
        180,
        41,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        243,
        66,
        130,
        97,
        5,
        185,
        86,
        91,
        96,
        1,
        129,
        144,
        85,
        96,
        0,
        130,
        144,
        85,
        96,
        64,
        81,
        127,
        183,
        67,
        134,
        224,
        56,
        172,
        229,
        28,
        226,
        142,
        26,
        59,
        29,
        124,
        183,
        178,
        3,
        139,
        201,
        25,
        138,
        124,
        122,
        28,
        125,
        189,
        156,
        203,
        136,
        158,
        108,
        29,
        146,
        97,
        3,
        52,
        146,
        144,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        2,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        128,
        21,
        128,
        21,
        144,
        97,
        3,
        126,
        87,
        80,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        51,
        20,
        21,
        91,
        21,
        97,
        3,
        181,
        87,
        96,
        64,
        81,
        127,
        136,
        105,
        190,
        44,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        2,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        21,
        97,
        3,
        242,
        87,
        130,
        97,
        3,
        244,
        86,
        91,
        129,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        130,
        16,
        21,
        97,
        4,
        57,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        130,
        17,
        21,
        97,
        4,
        123,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        4,
        135,
        66,
        133,
        97,
        5,
        185,
        86,
        91,
        80,
        144,
        80,
        130,
        132,
        3,
        97,
        4,
        163,
        87,
        97,
        4,
        155,
        129,
        132,
        97,
        6,
        22,
        86,
        91,
        145,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        4,
        184,
        134,
        134,
        97,
        13,
        244,
        86,
        91,
        97,
        4,
        194,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        97,
        4,
        220,
        96,
        1,
        130,
        97,
        4,
        213,
        136,
        136,
        135,
        97,
        6,
        242,
        86,
        91,
        145,
        144,
        97,
        5,
        139,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        21,
        97,
        5,
        33,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        129,
        131,
        3,
        97,
        5,
        48,
        87,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        97,
        5,
        60,
        66,
        133,
        97,
        5,
        185,
        86,
        91,
        80,
        144,
        80,
        96,
        0,
        97,
        5,
        76,
        132,
        134,
        132,
        97,
        6,
        242,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        5,
        92,
        96,
        0,
        135,
        133,
        97,
        6,
        242,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        5,
        114,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        129,
        97,
        5,
        127,
        129,
        131,
        97,
        14,
        30,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        130,
        2,
        129,
        21,
        21,
        132,
        21,
        133,
        131,
        4,
        133,
        20,
        23,
        22,
        97,
        5,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        130,
        96,
        1,
        131,
        3,
        4,
        1,
        129,
        21,
        21,
        2,
        144,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        0,
        144,
        129,
        144,
        128,
        133,
        16,
        21,
        97,
        5,
        251,
        87,
        96,
        64,
        81,
        127,
        111,
        126,
        172,
        38,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        14,
        132,
        97,
        6,
        9,
        131,
        136,
        97,
        13,
        244,
        86,
        91,
        97,
        9,
        228,
        86,
        91,
        149,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        17,
        21,
        97,
        6,
        143,
        87,
        130,
        97,
        6,
        126,
        97,
        6,
        78,
        133,
        133,
        97,
        11,
        56,
        86,
        91,
        97,
        6,
        120,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        97,
        12,
        176,
        86,
        91,
        97,
        6,
        136,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        144,
        80,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        6,
        189,
        87,
        80,
        129,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        6,
        126,
        97,
        6,
        235,
        133,
        133,
        97,
        11,
        56,
        86,
        91,
        132,
        144,
        97,
        12,
        176,
        86,
        91,
        96,
        0,
        131,
        131,
        16,
        21,
        97,
        7,
        46,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        133,
        17,
        97,
        7,
        225,
        87,
        97,
        7,
        220,
        97,
        7,
        100,
        132,
        135,
        97,
        11,
        56,
        86,
        91,
        134,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        17,
        97,
        7,
        146,
        87,
        134,
        97,
        7,
        180,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        12,
        197,
        86,
        91,
        97,
        7,
        228,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        133,
        16,
        128,
        97,
        8,
        53,
        87,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        17,
        91,
        97,
        9,
        8,
        87,
        97,
        9,
        3,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        17,
        97,
        8,
        139,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        8,
        141,
        86,
        91,
        135,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        16,
        97,
        8,
        218,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        8,
        220,
        86,
        91,
        135,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        97,
        12,
        197,
        86,
        91,
        97,
        9,
        11,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        16,
        97,
        9,
        191,
        87,
        97,
        9,
        186,
        97,
        9,
        67,
        134,
        136,
        97,
        11,
        56,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        137,
        17,
        97,
        9,
        144,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        9,
        146,
        86,
        91,
        136,
        91,
        136,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        137,
        97,
        12,
        197,
        86,
        91,
        97,
        9,
        194,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        128,
        97,
        9,
        207,
        131,
        133,
        97,
        14,
        89,
        86,
        91,
        97,
        9,
        217,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        132,
        16,
        97,
        10,
        161,
        87,
        97,
        4,
        155,
        97,
        10,
        113,
        132,
        97,
        10,
        64,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        97,
        13,
        244,
        86,
        91,
        97,
        10,
        74,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        97,
        12,
        176,
        86,
        91,
        97,
        10,
        123,
        144,
        131,
        97,
        14,
        89,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        3,
        226,
        86,
        91,
        96,
        0,
        97,
        10,
        209,
        132,
        97,
        10,
        64,
        135,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        144,
        80,
        97,
        10,
        253,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        97,
        13,
        244,
        86,
        91,
        129,
        17,
        21,
        97,
        11,
        46,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        146,
        80,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        97,
        4,
        220,
        129,
        131,
        97,
        13,
        244,
        86,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        21,
        97,
        11,
        243,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        21,
        97,
        11,
        235,
        87,
        97,
        11,
        230,
        97,
        11,
        182,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        97,
        11,
        224,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        97,
        13,
        142,
        86,
        91,
        97,
        6,
        136,
        86,
        91,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        17,
        97,
        12,
        34,
        87,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        20,
        97,
        11,
        235,
        87,
        97,
        11,
        230,
        97,
        12,
        134,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        97,
        11,
        224,
        133,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        96,
        0,
        97,
        3,
        244,
        131,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        5,
        139,
        86,
        91,
        96,
        0,
        130,
        133,
        16,
        21,
        97,
        13,
        1,
        87,
        96,
        64,
        81,
        127,
        3,
        11,
        64,
        17,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        13,
        13,
        134,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        80,
        96,
        0,
        96,
        2,
        97,
        13,
        29,
        131,
        138,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        39,
        144,
        132,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        49,
        145,
        144,
        97,
        14,
        30,
        86,
        91,
        144,
        80,
        96,
        0,
        136,
        97,
        13,
        64,
        135,
        138,
        97,
        13,
        244,
        86,
        91,
        97,
        13,
        74,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        92,
        134,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        102,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        13,
        116,
        132,
        131,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        97,
        13,
        128,
        129,
        132,
        97,
        14,
        89,
        86,
        91,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        244,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        5,
        139,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        13,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        128,
        53,
        146,
        96,
        32,
        144,
        145,
        1,
        53,
        145,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        91,
        96,
        0,
        130,
        97,
        14,
        84,
        87,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        241,
        238,
        77,
        0,
        80,
        7,
        115,
        93,
        172,
        168,
        243,
        133,
        112,
        46,
        169,
        99,
        99,
        201,
        98,
        175,
        184,
        183,
        3,
        254,
        132,
        45,
        132,
        225,
        164,
        23,
        1,
        150,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static COSTMODELDYNAMICLEVEL_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        233,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        185,
        42,
        98,
        15,
        17,
        97,
        0,
        140,
        87,
        128,
        99,
        207,
        208,
        250,
        201,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        207,
        208,
        250,
        201,
        20,
        97,
        2,
        6,
        87,
        128,
        99,
        215,
        200,
        86,
        179,
        20,
        97,
        2,
        45,
        87,
        128,
        99,
        224,
        53,
        203,
        202,
        20,
        97,
        2,
        64,
        87,
        128,
        99,
        230,
        86,
        146,
        117,
        20,
        97,
        2,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        185,
        42,
        98,
        15,
        20,
        97,
        1,
        175,
        87,
        128,
        99,
        188,
        198,
        240,
        18,
        20,
        97,
        1,
        214,
        87,
        128,
        99,
        200,
        243,
        60,
        145,
        20,
        97,
        1,
        253,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        59,
        27,
        101,
        32,
        17,
        97,
        0,
        200,
        87,
        128,
        99,
        59,
        27,
        101,
        32,
        20,
        97,
        1,
        100,
        87,
        128,
        99,
        117,
        223,
        40,
        38,
        20,
        97,
        1,
        108,
        87,
        128,
        99,
        128,
        163,
        175,
        54,
        20,
        97,
        1,
        117,
        87,
        128,
        99,
        172,
        2,
        59,
        117,
        20,
        97,
        1,
        156,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        61,
        254,
        96,
        20,
        97,
        0,
        238,
        87,
        128,
        99,
        4,
        171,
        54,
        201,
        20,
        97,
        1,
        40,
        87,
        128,
        99,
        47,
        181,
        101,
        232,
        20,
        97,
        1,
        79,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        98,
        97,
        1,
        93,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        2,
        152,
        86,
        91,
        0,
        91,
        97,
        1,
        98,
        97,
        3,
        64,
        86,
        91,
        97,
        1,
        21,
        96,
        0,
        84,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        97,
        1,
        170,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        3,
        226,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        96,
        1,
        84,
        129,
        86,
        91,
        97,
        1,
        21,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        21,
        97,
        2,
        59,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        3,
        253,
        86,
        91,
        97,
        1,
        21,
        97,
        2,
        78,
        54,
        96,
        4,
        97,
        13,
        163,
        86,
        91,
        97,
        4,
        229,
        86,
        91,
        96,
        2,
        84,
        97,
        2,
        115,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        31,
        86,
        91,
        96,
        2,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        51,
        20,
        97,
        2,
        233,
        87,
        96,
        64,
        81,
        127,
        130,
        180,
        41,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        243,
        66,
        130,
        97,
        5,
        185,
        86,
        91,
        96,
        1,
        129,
        144,
        85,
        96,
        0,
        130,
        144,
        85,
        96,
        64,
        81,
        127,
        183,
        67,
        134,
        224,
        56,
        172,
        229,
        28,
        226,
        142,
        26,
        59,
        29,
        124,
        183,
        178,
        3,
        139,
        201,
        25,
        138,
        124,
        122,
        28,
        125,
        189,
        156,
        203,
        136,
        158,
        108,
        29,
        146,
        97,
        3,
        52,
        146,
        144,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        2,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        128,
        21,
        128,
        21,
        144,
        97,
        3,
        126,
        87,
        80,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        51,
        20,
        21,
        91,
        21,
        97,
        3,
        181,
        87,
        96,
        64,
        81,
        127,
        136,
        105,
        190,
        44,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        2,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        21,
        97,
        3,
        242,
        87,
        130,
        97,
        3,
        244,
        86,
        91,
        129,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        130,
        16,
        21,
        97,
        4,
        57,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        130,
        17,
        21,
        97,
        4,
        123,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        4,
        135,
        66,
        133,
        97,
        5,
        185,
        86,
        91,
        80,
        144,
        80,
        130,
        132,
        3,
        97,
        4,
        163,
        87,
        97,
        4,
        155,
        129,
        132,
        97,
        6,
        22,
        86,
        91,
        145,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        4,
        184,
        134,
        134,
        97,
        13,
        244,
        86,
        91,
        97,
        4,
        194,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        97,
        4,
        220,
        96,
        1,
        130,
        97,
        4,
        213,
        136,
        136,
        135,
        97,
        6,
        242,
        86,
        91,
        145,
        144,
        97,
        5,
        139,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        21,
        97,
        5,
        33,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        129,
        131,
        3,
        97,
        5,
        48,
        87,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        96,
        0,
        97,
        5,
        60,
        66,
        133,
        97,
        5,
        185,
        86,
        91,
        80,
        144,
        80,
        96,
        0,
        97,
        5,
        76,
        132,
        134,
        132,
        97,
        6,
        242,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        5,
        92,
        96,
        0,
        135,
        133,
        97,
        6,
        242,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        5,
        114,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        129,
        97,
        5,
        127,
        129,
        131,
        97,
        14,
        30,
        86,
        91,
        152,
        151,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        130,
        2,
        129,
        21,
        21,
        132,
        21,
        133,
        131,
        4,
        133,
        20,
        23,
        22,
        97,
        5,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        130,
        96,
        1,
        131,
        3,
        4,
        1,
        129,
        21,
        21,
        2,
        144,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        0,
        144,
        129,
        144,
        128,
        133,
        16,
        21,
        97,
        5,
        251,
        87,
        96,
        64,
        81,
        127,
        111,
        126,
        172,
        38,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        14,
        132,
        97,
        6,
        9,
        131,
        136,
        97,
        13,
        244,
        86,
        91,
        97,
        9,
        228,
        86,
        91,
        149,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        17,
        21,
        97,
        6,
        143,
        87,
        130,
        97,
        6,
        126,
        97,
        6,
        78,
        133,
        133,
        97,
        11,
        56,
        86,
        91,
        97,
        6,
        120,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        97,
        12,
        176,
        86,
        91,
        97,
        6,
        136,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        144,
        80,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        6,
        189,
        87,
        80,
        129,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        6,
        126,
        97,
        6,
        235,
        133,
        133,
        97,
        11,
        56,
        86,
        91,
        132,
        144,
        97,
        12,
        176,
        86,
        91,
        96,
        0,
        131,
        131,
        16,
        21,
        97,
        7,
        46,
        87,
        96,
        64,
        81,
        127,
        37,
        6,
        46,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        133,
        17,
        97,
        7,
        225,
        87,
        97,
        7,
        220,
        97,
        7,
        100,
        132,
        135,
        97,
        11,
        56,
        86,
        91,
        134,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        17,
        97,
        7,
        146,
        87,
        134,
        97,
        7,
        180,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        12,
        197,
        86,
        91,
        97,
        7,
        228,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        133,
        16,
        128,
        97,
        8,
        53,
        87,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        17,
        91,
        97,
        9,
        8,
        87,
        97,
        9,
        3,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        17,
        97,
        8,
        139,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        8,
        141,
        86,
        91,
        135,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        16,
        97,
        8,
        218,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        8,
        220,
        86,
        91,
        135,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        97,
        12,
        197,
        86,
        91,
        97,
        9,
        11,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        16,
        97,
        9,
        191,
        87,
        97,
        9,
        186,
        97,
        9,
        67,
        134,
        136,
        97,
        11,
        56,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        137,
        17,
        97,
        9,
        144,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        9,
        146,
        86,
        91,
        136,
        91,
        136,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        137,
        97,
        12,
        197,
        86,
        91,
        97,
        9,
        194,
        86,
        91,
        96,
        0,
        91,
        144,
        80,
        128,
        97,
        9,
        207,
        131,
        133,
        97,
        14,
        89,
        86,
        91,
        97,
        9,
        217,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        132,
        16,
        97,
        10,
        161,
        87,
        97,
        4,
        155,
        97,
        10,
        113,
        132,
        97,
        10,
        64,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        136,
        97,
        13,
        244,
        86,
        91,
        97,
        10,
        74,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        97,
        12,
        176,
        86,
        91,
        97,
        10,
        123,
        144,
        131,
        97,
        14,
        89,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        3,
        226,
        86,
        91,
        96,
        0,
        97,
        10,
        209,
        132,
        97,
        10,
        64,
        135,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        144,
        80,
        97,
        10,
        253,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        97,
        13,
        244,
        86,
        91,
        129,
        17,
        21,
        97,
        11,
        46,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        146,
        80,
        80,
        80,
        97,
        3,
        247,
        86,
        91,
        97,
        4,
        220,
        129,
        131,
        97,
        13,
        244,
        86,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        21,
        97,
        11,
        243,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        21,
        97,
        11,
        235,
        87,
        97,
        11,
        230,
        97,
        11,
        182,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        97,
        11,
        224,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        97,
        13,
        142,
        86,
        91,
        97,
        6,
        136,
        86,
        91,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        17,
        97,
        12,
        34,
        87,
        80,
        96,
        0,
        97,
        3,
        247,
        86,
        91,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        20,
        97,
        11,
        235,
        87,
        97,
        11,
        230,
        97,
        12,
        134,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        97,
        11,
        224,
        133,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        13,
        244,
        86,
        91,
        96,
        0,
        97,
        3,
        244,
        131,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        5,
        139,
        86,
        91,
        96,
        0,
        130,
        133,
        16,
        21,
        97,
        13,
        1,
        87,
        96,
        64,
        81,
        127,
        3,
        11,
        64,
        17,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        13,
        13,
        134,
        134,
        97,
        13,
        244,
        86,
        91,
        144,
        80,
        96,
        0,
        96,
        2,
        97,
        13,
        29,
        131,
        138,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        39,
        144,
        132,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        49,
        145,
        144,
        97,
        14,
        30,
        86,
        91,
        144,
        80,
        96,
        0,
        136,
        97,
        13,
        64,
        135,
        138,
        97,
        13,
        244,
        86,
        91,
        97,
        13,
        74,
        145,
        144,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        92,
        134,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        14,
        7,
        86,
        91,
        97,
        13,
        102,
        145,
        144,
        97,
        14,
        89,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        13,
        116,
        132,
        131,
        97,
        14,
        7,
        86,
        91,
        144,
        80,
        97,
        13,
        128,
        129,
        132,
        97,
        14,
        89,
        86,
        91,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        244,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        5,
        139,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        13,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        128,
        53,
        146,
        96,
        32,
        144,
        145,
        1,
        53,
        145,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        91,
        96,
        0,
        130,
        97,
        14,
        84,
        87,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        3,
        247,
        87,
        97,
        3,
        247,
        97,
        13,
        197,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        241,
        238,
        77,
        0,
        80,
        7,
        115,
        93,
        172,
        168,
        243,
        133,
        112,
        46,
        169,
        99,
        99,
        201,
        98,
        175,
        184,
        183,
        3,
        254,
        132,
        45,
        132,
        225,
        164,
        23,
        1,
        150,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static COSTMODELDYNAMICLEVEL_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct CostModelDynamicLevel<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for CostModelDynamicLevel<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for CostModelDynamicLevel<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for CostModelDynamicLevel<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for CostModelDynamicLevel<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(CostModelDynamicLevel))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> CostModelDynamicLevel<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    COSTMODELDYNAMICLEVEL_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                COSTMODELDYNAMICLEVEL_ABI.clone(),
                COSTMODELDYNAMICLEVEL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `_min` (0xac023b75) function
        pub fn min(
            &self,
            a: ::ethers::core::types::U256,
            b: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([172, 2, 59, 117], (a, b))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `costFactor` (0xd7c856b3) function
        pub fn cost_factor(
            &self,
            from_utilization: ::ethers::core::types::U256,
            to_utilization: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([215, 200, 86, 179], (from_utilization, to_utilization))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `costFactorAtFullUtilization` (0xcfd0fac9) function
        pub fn cost_factor_at_full_utilization(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([207, 208, 250, 201], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `costFactorAtZeroUtilization` (0xb92a620f) function
        pub fn cost_factor_at_zero_utilization(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([185, 42, 98, 15], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `costFactorInOptimalZone` (0x75df2826) function
        pub fn cost_factor_in_optimal_zone(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([117, 223, 40, 38], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastUpdateTime` (0xc8f33c91) function
        pub fn last_update_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([200, 243, 60, 145], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `optimalZoneRate` (0x003dfe60) function
        pub fn optimal_zone_rate(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([0, 61, 254, 96], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `refundFactor` (0xe035cbca) function
        pub fn refund_factor(
            &self,
            from_utilization: ::ethers::core::types::U256,
            to_utilization: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([224, 53, 203, 202], (from_utilization, to_utilization))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `registerSet` (0x3b1b6520) function
        pub fn register_set(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 27, 101, 32], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setAddress` (0xe6569275) function
        pub fn set_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([230, 86, 146, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uHigh` (0xbcc6f012) function
        pub fn u_high(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([188, 198, 240, 18], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uLow` (0x04ab36c9) function
        pub fn u_low(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([4, 171, 54, 201], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uOpt` (0x80a3af36) function
        pub fn u_opt(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([128, 163, 175, 54], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `update` (0x2fb565e8) function
        pub fn update(
            &self,
            utilization: ::ethers::core::types::U256,
            new_utilization: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([47, 181, 101, 232], (utilization, new_utilization))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `UpdatedDynamicLevelModelParameters` event
        pub fn updated_dynamic_level_model_parameters_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            UpdatedDynamicLevelModelParametersFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            UpdatedDynamicLevelModelParametersFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for CostModelDynamicLevel<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidConfiguration` with signature `InvalidConfiguration()` and selector `0xc52a9bd3`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidConfiguration", abi = "InvalidConfiguration()")]
    pub struct InvalidConfiguration;
    ///Custom Error type `InvalidReferencePoint` with signature `InvalidReferencePoint()` and selector `0x030b4011`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidReferencePoint", abi = "InvalidReferencePoint()")]
    pub struct InvalidReferencePoint;
    ///Custom Error type `InvalidTime` with signature `InvalidTime()` and selector `0x6f7eac26`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidTime", abi = "InvalidTime()")]
    pub struct InvalidTime;
    ///Custom Error type `InvalidUtilization` with signature `InvalidUtilization()` and selector `0x25062e25`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InvalidUtilization", abi = "InvalidUtilization()")]
    pub struct InvalidUtilization;
    ///Custom Error type `SetAlreadyRegistered` with signature `SetAlreadyRegistered()` and selector `0x8869be2c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "SetAlreadyRegistered", abi = "SetAlreadyRegistered()")]
    pub struct SetAlreadyRegistered;
    ///Custom Error type `Unauthorized` with signature `Unauthorized()` and selector `0x82b42900`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Unauthorized", abi = "Unauthorized()")]
    pub struct Unauthorized;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CostModelDynamicLevelErrors {
        InvalidConfiguration(InvalidConfiguration),
        InvalidReferencePoint(InvalidReferencePoint),
        InvalidTime(InvalidTime),
        InvalidUtilization(InvalidUtilization),
        SetAlreadyRegistered(SetAlreadyRegistered),
        Unauthorized(Unauthorized),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for CostModelDynamicLevelErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <InvalidConfiguration as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidConfiguration(decoded));
            }
            if let Ok(decoded)
                = <InvalidReferencePoint as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InvalidReferencePoint(decoded));
            }
            if let Ok(decoded)
                = <InvalidTime as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidTime(decoded));
            }
            if let Ok(decoded)
                = <InvalidUtilization as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidUtilization(decoded));
            }
            if let Ok(decoded)
                = <SetAlreadyRegistered as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::SetAlreadyRegistered(decoded));
            }
            if let Ok(decoded)
                = <Unauthorized as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Unauthorized(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CostModelDynamicLevelErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::InvalidConfiguration(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidReferencePoint(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidTime(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InvalidUtilization(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetAlreadyRegistered(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Unauthorized(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for CostModelDynamicLevelErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <InvalidConfiguration as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidReferencePoint as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InvalidTime as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <InvalidUtilization as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <SetAlreadyRegistered as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Unauthorized as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for CostModelDynamicLevelErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::InvalidConfiguration(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidReferencePoint(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::InvalidTime(element) => ::core::fmt::Display::fmt(element, f),
                Self::InvalidUtilization(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::SetAlreadyRegistered(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Unauthorized(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for CostModelDynamicLevelErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<InvalidConfiguration> for CostModelDynamicLevelErrors {
        fn from(value: InvalidConfiguration) -> Self {
            Self::InvalidConfiguration(value)
        }
    }
    impl ::core::convert::From<InvalidReferencePoint> for CostModelDynamicLevelErrors {
        fn from(value: InvalidReferencePoint) -> Self {
            Self::InvalidReferencePoint(value)
        }
    }
    impl ::core::convert::From<InvalidTime> for CostModelDynamicLevelErrors {
        fn from(value: InvalidTime) -> Self {
            Self::InvalidTime(value)
        }
    }
    impl ::core::convert::From<InvalidUtilization> for CostModelDynamicLevelErrors {
        fn from(value: InvalidUtilization) -> Self {
            Self::InvalidUtilization(value)
        }
    }
    impl ::core::convert::From<SetAlreadyRegistered> for CostModelDynamicLevelErrors {
        fn from(value: SetAlreadyRegistered) -> Self {
            Self::SetAlreadyRegistered(value)
        }
    }
    impl ::core::convert::From<Unauthorized> for CostModelDynamicLevelErrors {
        fn from(value: Unauthorized) -> Self {
            Self::Unauthorized(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "UpdatedDynamicLevelModelParameters",
        abi = "UpdatedDynamicLevelModelParameters(uint256,uint256)"
    )]
    pub struct UpdatedDynamicLevelModelParametersFilter {
        pub cost_factor_in_optimal_zone: ::ethers::core::types::U256,
        pub last_update_time: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `_min` function with signature `_min(uint256,uint256)` and selector `0xac023b75`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "_min", abi = "_min(uint256,uint256)")]
    pub struct MinCall {
        pub a: ::ethers::core::types::U256,
        pub b: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `costFactor` function with signature `costFactor(uint256,uint256)` and selector `0xd7c856b3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "costFactor", abi = "costFactor(uint256,uint256)")]
    pub struct CostFactorCall {
        pub from_utilization: ::ethers::core::types::U256,
        pub to_utilization: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `costFactorAtFullUtilization` function with signature `costFactorAtFullUtilization()` and selector `0xcfd0fac9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "costFactorAtFullUtilization",
        abi = "costFactorAtFullUtilization()"
    )]
    pub struct CostFactorAtFullUtilizationCall;
    ///Container type for all input parameters for the `costFactorAtZeroUtilization` function with signature `costFactorAtZeroUtilization()` and selector `0xb92a620f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "costFactorAtZeroUtilization",
        abi = "costFactorAtZeroUtilization()"
    )]
    pub struct CostFactorAtZeroUtilizationCall;
    ///Container type for all input parameters for the `costFactorInOptimalZone` function with signature `costFactorInOptimalZone()` and selector `0x75df2826`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "costFactorInOptimalZone", abi = "costFactorInOptimalZone()")]
    pub struct CostFactorInOptimalZoneCall;
    ///Container type for all input parameters for the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastUpdateTime", abi = "lastUpdateTime()")]
    pub struct LastUpdateTimeCall;
    ///Container type for all input parameters for the `optimalZoneRate` function with signature `optimalZoneRate()` and selector `0x003dfe60`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "optimalZoneRate", abi = "optimalZoneRate()")]
    pub struct OptimalZoneRateCall;
    ///Container type for all input parameters for the `refundFactor` function with signature `refundFactor(uint256,uint256)` and selector `0xe035cbca`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "refundFactor", abi = "refundFactor(uint256,uint256)")]
    pub struct RefundFactorCall {
        pub from_utilization: ::ethers::core::types::U256,
        pub to_utilization: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `registerSet` function with signature `registerSet()` and selector `0x3b1b6520`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "registerSet", abi = "registerSet()")]
    pub struct RegisterSetCall;
    ///Container type for all input parameters for the `setAddress` function with signature `setAddress()` and selector `0xe6569275`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setAddress", abi = "setAddress()")]
    pub struct SetAddressCall;
    ///Container type for all input parameters for the `uHigh` function with signature `uHigh()` and selector `0xbcc6f012`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uHigh", abi = "uHigh()")]
    pub struct UhighCall;
    ///Container type for all input parameters for the `uLow` function with signature `uLow()` and selector `0x04ab36c9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uLow", abi = "uLow()")]
    pub struct UlowCall;
    ///Container type for all input parameters for the `uOpt` function with signature `uOpt()` and selector `0x80a3af36`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "uOpt", abi = "uOpt()")]
    pub struct UoptCall;
    ///Container type for all input parameters for the `update` function with signature `update(uint256,uint256)` and selector `0x2fb565e8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "update", abi = "update(uint256,uint256)")]
    pub struct UpdateCall {
        pub utilization: ::ethers::core::types::U256,
        pub new_utilization: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CostModelDynamicLevelCalls {
        Min(MinCall),
        CostFactor(CostFactorCall),
        CostFactorAtFullUtilization(CostFactorAtFullUtilizationCall),
        CostFactorAtZeroUtilization(CostFactorAtZeroUtilizationCall),
        CostFactorInOptimalZone(CostFactorInOptimalZoneCall),
        LastUpdateTime(LastUpdateTimeCall),
        OptimalZoneRate(OptimalZoneRateCall),
        RefundFactor(RefundFactorCall),
        RegisterSet(RegisterSetCall),
        SetAddress(SetAddressCall),
        Uhigh(UhighCall),
        Ulow(UlowCall),
        Uopt(UoptCall),
        Update(UpdateCall),
    }
    impl ::ethers::core::abi::AbiDecode for CostModelDynamicLevelCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <MinCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Min(decoded));
            }
            if let Ok(decoded)
                = <CostFactorCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CostFactor(decoded));
            }
            if let Ok(decoded)
                = <CostFactorAtFullUtilizationCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CostFactorAtFullUtilization(decoded));
            }
            if let Ok(decoded)
                = <CostFactorAtZeroUtilizationCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CostFactorAtZeroUtilization(decoded));
            }
            if let Ok(decoded)
                = <CostFactorInOptimalZoneCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CostFactorInOptimalZone(decoded));
            }
            if let Ok(decoded)
                = <LastUpdateTimeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LastUpdateTime(decoded));
            }
            if let Ok(decoded)
                = <OptimalZoneRateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::OptimalZoneRate(decoded));
            }
            if let Ok(decoded)
                = <RefundFactorCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::RefundFactor(decoded));
            }
            if let Ok(decoded)
                = <RegisterSetCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::RegisterSet(decoded));
            }
            if let Ok(decoded)
                = <SetAddressCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetAddress(decoded));
            }
            if let Ok(decoded)
                = <UhighCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Uhigh(decoded));
            }
            if let Ok(decoded)
                = <UlowCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Ulow(decoded));
            }
            if let Ok(decoded)
                = <UoptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Uopt(decoded));
            }
            if let Ok(decoded)
                = <UpdateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Update(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CostModelDynamicLevelCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Min(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::CostFactor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CostFactorAtFullUtilization(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CostFactorAtZeroUtilization(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CostFactorInOptimalZone(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastUpdateTime(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OptimalZoneRate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RefundFactor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RegisterSet(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Uhigh(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Ulow(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Uopt(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Update(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for CostModelDynamicLevelCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Min(element) => ::core::fmt::Display::fmt(element, f),
                Self::CostFactor(element) => ::core::fmt::Display::fmt(element, f),
                Self::CostFactorAtFullUtilization(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CostFactorAtZeroUtilization(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CostFactorInOptimalZone(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::LastUpdateTime(element) => ::core::fmt::Display::fmt(element, f),
                Self::OptimalZoneRate(element) => ::core::fmt::Display::fmt(element, f),
                Self::RefundFactor(element) => ::core::fmt::Display::fmt(element, f),
                Self::RegisterSet(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::Uhigh(element) => ::core::fmt::Display::fmt(element, f),
                Self::Ulow(element) => ::core::fmt::Display::fmt(element, f),
                Self::Uopt(element) => ::core::fmt::Display::fmt(element, f),
                Self::Update(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<MinCall> for CostModelDynamicLevelCalls {
        fn from(value: MinCall) -> Self {
            Self::Min(value)
        }
    }
    impl ::core::convert::From<CostFactorCall> for CostModelDynamicLevelCalls {
        fn from(value: CostFactorCall) -> Self {
            Self::CostFactor(value)
        }
    }
    impl ::core::convert::From<CostFactorAtFullUtilizationCall>
    for CostModelDynamicLevelCalls {
        fn from(value: CostFactorAtFullUtilizationCall) -> Self {
            Self::CostFactorAtFullUtilization(value)
        }
    }
    impl ::core::convert::From<CostFactorAtZeroUtilizationCall>
    for CostModelDynamicLevelCalls {
        fn from(value: CostFactorAtZeroUtilizationCall) -> Self {
            Self::CostFactorAtZeroUtilization(value)
        }
    }
    impl ::core::convert::From<CostFactorInOptimalZoneCall>
    for CostModelDynamicLevelCalls {
        fn from(value: CostFactorInOptimalZoneCall) -> Self {
            Self::CostFactorInOptimalZone(value)
        }
    }
    impl ::core::convert::From<LastUpdateTimeCall> for CostModelDynamicLevelCalls {
        fn from(value: LastUpdateTimeCall) -> Self {
            Self::LastUpdateTime(value)
        }
    }
    impl ::core::convert::From<OptimalZoneRateCall> for CostModelDynamicLevelCalls {
        fn from(value: OptimalZoneRateCall) -> Self {
            Self::OptimalZoneRate(value)
        }
    }
    impl ::core::convert::From<RefundFactorCall> for CostModelDynamicLevelCalls {
        fn from(value: RefundFactorCall) -> Self {
            Self::RefundFactor(value)
        }
    }
    impl ::core::convert::From<RegisterSetCall> for CostModelDynamicLevelCalls {
        fn from(value: RegisterSetCall) -> Self {
            Self::RegisterSet(value)
        }
    }
    impl ::core::convert::From<SetAddressCall> for CostModelDynamicLevelCalls {
        fn from(value: SetAddressCall) -> Self {
            Self::SetAddress(value)
        }
    }
    impl ::core::convert::From<UhighCall> for CostModelDynamicLevelCalls {
        fn from(value: UhighCall) -> Self {
            Self::Uhigh(value)
        }
    }
    impl ::core::convert::From<UlowCall> for CostModelDynamicLevelCalls {
        fn from(value: UlowCall) -> Self {
            Self::Ulow(value)
        }
    }
    impl ::core::convert::From<UoptCall> for CostModelDynamicLevelCalls {
        fn from(value: UoptCall) -> Self {
            Self::Uopt(value)
        }
    }
    impl ::core::convert::From<UpdateCall> for CostModelDynamicLevelCalls {
        fn from(value: UpdateCall) -> Self {
            Self::Update(value)
        }
    }
    ///Container type for all return fields from the `_min` function with signature `_min(uint256,uint256)` and selector `0xac023b75`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MinReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `costFactor` function with signature `costFactor(uint256,uint256)` and selector `0xd7c856b3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CostFactorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `costFactorAtFullUtilization` function with signature `costFactorAtFullUtilization()` and selector `0xcfd0fac9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CostFactorAtFullUtilizationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `costFactorAtZeroUtilization` function with signature `costFactorAtZeroUtilization()` and selector `0xb92a620f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CostFactorAtZeroUtilizationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `costFactorInOptimalZone` function with signature `costFactorInOptimalZone()` and selector `0x75df2826`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CostFactorInOptimalZoneReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastUpdateTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `optimalZoneRate` function with signature `optimalZoneRate()` and selector `0x003dfe60`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OptimalZoneRateReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `refundFactor` function with signature `refundFactor(uint256,uint256)` and selector `0xe035cbca`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RefundFactorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `setAddress` function with signature `setAddress()` and selector `0xe6569275`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SetAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `uHigh` function with signature `uHigh()` and selector `0xbcc6f012`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UhighReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `uLow` function with signature `uLow()` and selector `0x04ab36c9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UlowReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `uOpt` function with signature `uOpt()` and selector `0x80a3af36`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct UoptReturn(pub ::ethers::core::types::U256);
}
